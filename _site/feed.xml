<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-03-23T16:42:36-04:00</updated><id>http://localhost:4000//</id><title type="html">Andrew McGill, friendly neighborhood journalist</title><subtitle>I'm a journalist and web developer from Philadelphia who hopes to die happy.</subtitle><author><name>andrewmcgill</name></author><entry><title type="html">A data interactive that challenges people to draw a trend, and then shows them reality</title><link href="http://localhost:4000/2019/01/13/making-the-guess-graph-module.html" rel="alternate" type="text/html" title="A data interactive that challenges people to draw a trend, and then shows them reality" /><published>2019-01-13T00:00:00-05:00</published><updated>2019-01-13T00:00:00-05:00</updated><id>http://localhost:4000/2019/01/13/making-the-guess-graph-module</id><content type="html" xml:base="http://localhost:4000/2019/01/13/making-the-guess-graph-module.html">&lt;p&gt;In the thick of the 2016 campaign, then-candidate Donald Trump frequently claimed that life in America was becoming &lt;a href=&quot;https://twitter.com/realDonaldTrump/status/752834632907943936&quot;&gt;more dangerous.&lt;/a&gt; He didn’t have to work hard to convince folks. Gallup pollsters found &lt;a href=&quot;http://www.gallup.com/poll/190475/americans-concern-crime-climbs-year-high.aspx&quot;&gt;more than half&lt;/a&gt; of Americans worried “a great deal” about crime and violence, and the same proportion expected gun violence to go up.&lt;/p&gt;

&lt;p&gt;The problem? Those opinions weren’t based on facts. Violence in the United States has declined almost every year for the past 25 years. Trump’s comments were well-timed — the national murder rate did briefly jot up in 2015 and 2016, largely driven by violence in a few cities — but the overwhelming trend is negative. New York City, which ranks near the &lt;a href=&quot;https://today.yougov.com/topics/lifestyle/articles-reports/2014/09/15/what-is-americas-most-dangerous-city&quot;&gt;bottom&lt;/a&gt; in polls on public perception of crime and violence, is actually one of the &lt;a href=&quot;https://www.brennancenter.org/sites/default/files/publications/2018_09_CrimeAnalysisV6.pdf&quot;&gt;safest places&lt;/a&gt; to live in the country.&lt;/p&gt;

&lt;p&gt;But simply stating facts &lt;a href=&quot;https://www.tandfonline.com/doi/full/10.1080/01296612.2017.1384145&quot;&gt;doesn’t always correct a misconception&lt;/a&gt; — people’s opinions are remarkably sticky. When I sat down to write &lt;a href=&quot;https://www.theatlantic.com/politics/archive/2016/07/is-violence-in-america-going-up-or-down/491384/&quot;&gt;a story&lt;/a&gt; on Trump’s doomsaying, I wondered if there was a sneakier way to show folks the true trends.&lt;/p&gt;

&lt;p&gt;My experiment: What if I had them draw their guess first, and then showed them the actual data?&lt;/p&gt;

&lt;p&gt;Here’s what I added near the top of the story:&lt;/p&gt;

&lt;div style=&quot;max-width: 800px; margin: auto&quot;&gt;
  &lt;guess-graph intro-title=&quot;Click the starting point and drag to draw the changing &amp;lt;strong&amp;gt;murder rate&amp;lt;/strong&amp;gt; between 1985-2014.&quot; data=&quot;https://s3.amazonaws.com/the-atlantic/homicide-rate/data/homicides-small.json&quot; y-axis-label=&quot;Homicides per 100,000 people&quot; x-axis-ticks=&quot;1986,1988,1990,1992,1994,1996,1998,2000,2002,2004,2006,2008,2010,2012,2014&quot; x-axis-ticks-mobile=&quot;1985,1990,1995,2000,2005,2010,2014&quot; x-axis-min=&quot;1985&quot; x-axis-max=&quot;2014&quot; y-axis-min=&quot;0&quot; y-axis-max=&quot;16&quot; result-message=&quot;false&quot; height-mobile=&quot;300&quot; height=&quot;400&quot;&gt;&lt;/guess-graph&gt;
&lt;/div&gt;

&lt;p&gt;It was a cool addition to the article, but I never had a chance to deploy this kind of interactive graphic again. What’s more, I never really got a sense if it was &lt;em&gt;effective&lt;/em&gt; — did this actually help people change their minds?&lt;/p&gt;

&lt;h2 id=&quot;two-years-later&quot;&gt;Two years later&lt;/h2&gt;

&lt;p&gt;The government is shut down. The Democrats refuse to fund a wall. And nearly every day, Trump claims there is a flood of people pouring across the southern border.&lt;/p&gt;

&lt;p&gt;By historical standards, this is not true. In fiscal year 2017, the U.S. Border Patrol apprehended 310,531 people, &lt;a href=&quot;https://www.cbp.gov/sites/default/files/assets/documents/2017-Dec/BP%20Total%20Apps%20FY1925-FY2017.pdf&quot;&gt;the lowest number since 1971.&lt;/a&gt; That’s despite a &lt;a href=&quot;https://www.cbp.gov/sites/default/files/assets/documents/2017-Dec/BP%20Staffing%20FY1992-FY2017.pdf&quot;&gt;historically high number&lt;/a&gt; of Border Patrol agents, though the force strength has slightly dropped from its peak in 2011.&lt;/p&gt;

&lt;p&gt;Could it be time to bring back the line-drawing trick?&lt;/p&gt;

&lt;p&gt;This week, my &lt;a href=&quot;http://www.andrewmcgill.me/2019/01/01/new-year-new-make-every-week-resolutions.html&quot;&gt;&lt;strong&gt;Make Every (Two) Week(s) project&lt;/strong&gt;&lt;/a&gt; is to turn my 2016 graphic into a reusuable web component I could launch with almost any dataset. I call it &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;guess-graph&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the new graphic:&lt;/p&gt;

&lt;div style=&quot;max-width: 800px; margin: auto&quot;&gt;
  &lt;guess-graph intro-title=&quot;Click the starting point and draw your best guess for &amp;lt;strong&amp;gt;total illegal border crossings&amp;lt;/strong&amp;gt; between 1997 and 2017.&quot; data=&quot;/assets/guess-graph/border-arrests.json&quot; y-axis-label=&quot;Illegal border crossings (in millions)&quot; y-axis-min=&quot;0&quot; y-axis-max=&quot;3&quot; height-mobile=&quot;300&quot; height=&quot;500&quot;&gt;&lt;/guess-graph&gt;
&lt;/div&gt;
&lt;script src=&quot;/assets/guess-graph/bundle.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And here’s the code I used to make it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;guess-graph
  intro-title = &quot;Click the starting point and 
    draw your best guess for total &amp;lt;strong&amp;gt;illegal 
    border crossings&amp;lt;/strong&amp;gt; between 1997 and 2017.&quot;
  data = &quot;/assets/guess-graph/border-arrests.json&quot;
  y-axis-label = &quot;Illegal border crossings (in millions)&quot;
  y-axis-min = &quot;0&quot;
  y-axis-max = &quot;3&quot;
  height-mobile = &quot;300&quot;
  height = &quot;400&quot;
&amp;gt;&amp;lt;/guess-graph&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;While defaulting to sensible styles, it has a bunch of parameters that customize how it should look (&lt;a href=&quot;https://github.com/arm5077/guess-graph#customization&quot;&gt;full list here&lt;/a&gt;). For data, tt references an external JSON file, which looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[
  {
    &quot;year&quot;: 1997,
    &quot;rate&quot;: 1.369
  },
  {
    &quot;year&quot;: 1998,
    &quot;rate&quot;: 1.517
  },
  {
    &quot;year&quot;: 1999,
    &quot;rate&quot;: 1.537
  },
  ...
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This component is built using the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements&quot;&gt;Custom Elements V1&lt;/a&gt; spec, which brings some of the modularity seen in frameworks like React or Vue into vanilla HTML and JavaScript. Custom elements are now &lt;a href=&quot;https://caniuse.com/#feat=custom-elementsv1&quot;&gt;supported across all major browsers&lt;/a&gt; except Edge; for them and older browsers, use this &lt;a href=&quot;https://github.com/webcomponents/custom-elements/&quot;&gt;polyfill.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why make it as a custom element? This frees the user from having to use any particular JS framework, and makes dropping the code into a content management system or blogging platform like Wordpress easy for beginners.&lt;/p&gt;

&lt;p&gt;The full code for the component is &lt;a href=&quot;https://github.com/arm5077/guess-graph&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next&lt;/h2&gt;
&lt;p&gt;Now that I’ve built the component, next step is to put it through some user testing to see if it makes sense to readers and contributes to their understanding of counterintuitive trends. See you in two weeks!&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">In the thick of the 2016 campaign, then-candidate Donald Trump frequently claimed that life in America was becoming more dangerous. He didn’t have to work hard to convince folks. Gallup pollsters found more than half of Americans worried “a great deal” about crime and violence, and the same proportion expected gun violence to go up.</summary></entry><entry><title type="html">New Year, new Make Every Week resolution</title><link href="http://localhost:4000/2019/01/01/new-year-new-make-every-week-resolutions.html" rel="alternate" type="text/html" title="New Year, new Make Every Week resolution" /><published>2019-01-01T00:00:00-05:00</published><updated>2019-01-01T00:00:00-05:00</updated><id>http://localhost:4000/2019/01/01/new-year-new-make-every-week-resolutions</id><content type="html" xml:base="http://localhost:4000/2019/01/01/new-year-new-make-every-week-resolutions.html">&lt;p&gt;Three years ago, following the &lt;a href=&quot;http://johnkeefe.net/make-every-week-a-bendy-mangnifier&quot;&gt;advice&lt;/a&gt; of builder-journalist John Keefe, I resolved to make something new every week.&lt;/p&gt;

&lt;p&gt;At the time, I wrote and coded for &lt;em&gt;The Atlantic&lt;/em&gt;’s politics section, and my editor might have argued building every week was &lt;em&gt;already&lt;/em&gt; my job. But these projects were supposed to be different — off-the-cuff engineering hacks, with learning something new as the primary objective.&lt;/p&gt;

&lt;p&gt;What I quickly figured out: &lt;strong&gt;making something every week is hard.&lt;/strong&gt; In the end, I made only five things, and sometimes they took a lot more than a week:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://127.0.0.1:4000/2016/06/26/a-summer-of-make-every-week.html&quot;&gt;A Capital Bikeshare Pebble smartwatch app (RIP Pebble);&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.andrewmcgill.me/2016/07/05/make-every-week-2-slack-doorbell.html&quot;&gt;A Slack-powered doorbell;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.andrewmcgill.me/2016/07/18/make-every-week-dmv-tracker.html&quot;&gt;A computer vision script that monitored the lines at the DC DMV;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.andrewmcgill.me/2016/08/19/make-every-week-sweetgreen-salad-button.html&quot;&gt;A button that ordered Sweetgreen salads for me;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.andrewmcgill.me/2016/11/22/real-life-harry-potter-lumos-spell-snowboy.html&quot;&gt;A light that turned on when I said the magic word.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it was fun!&lt;/p&gt;

&lt;p&gt;So it’s back. For 2019, I’m resolving to &lt;strong&gt;Make Every (Two) Week(s),&lt;/strong&gt; launching a new project or improving an old one twice a month. These won’t always be perfectly polished — sometimes they’ll just be a non-functioning prototype. But I miss having the pressure of a publication deadline to keep me honest and busy.&lt;/p&gt;

&lt;p&gt;This time, things will be different. Each month, I’ll have two mandatory go-live dates — on the second and fourth Sundays of each month, I have to publish &lt;em&gt;something.&lt;/em&gt; Revisiting a project over multiple weeks is fine, but I should pursue something substantive, like a round of user-testing or a major enhancement.&lt;/p&gt;

&lt;p&gt;I’ve already picked out my first project, which will be turning the one-off “draw the line” interactive I built for &lt;a href=&quot;https://www.theatlantic.com/politics/archive/2016/07/is-violence-in-america-going-up-or-down/491384/&quot;&gt;this story&lt;/a&gt; on declining homicide rates into a &lt;a href=&quot;https://developers.google.com/web/fundamentals/web-components/customelements&quot;&gt;reuseable web component.&lt;/a&gt; Here’s a shortlist of what other stuff I might dive into:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An algorithmically generated magazine;&lt;/li&gt;
  &lt;li&gt;A website to help you quickly rank your favorite &lt;a href=&quot;https://en.wikipedia.org/wiki/Marvel_Cinematic_Universe&quot;&gt;Marvel Cinematic Universe&lt;/a&gt; movies;&lt;/li&gt;
  &lt;li&gt;An app to help teams see where their members fall on the &lt;a href=&quot;http://www.slate.com/articles/life/low_concept/2012/06/what_kind_of_muppet_are_you_chaos_or_order_.html&quot;&gt;“chaos-order muppet scale”&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;An app to help worker bees quickly surface ideas to top leadership;&lt;/li&gt;
  &lt;li&gt;???&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;arm5077@gmail.com&quot;&gt;Hit me up&lt;/a&gt; if you’ve got a great idea. Otherwise, let the making begin!&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">Three years ago, following the advice of builder-journalist John Keefe, I resolved to make something new every week.</summary></entry><entry><title type="html">Excited by the latest news platform? Build three — yes, three — prototypes to test it first</title><link href="http://localhost:4000/2018/03/29/excited-by-latest-news-platform-build-three-prototypes-first.html" rel="alternate" type="text/html" title="Excited by the latest news platform? Build three — yes, three — prototypes to test it first" /><published>2018-03-29T00:00:00-04:00</published><updated>2018-03-29T00:00:00-04:00</updated><id>http://localhost:4000/2018/03/29/excited-by-latest-news-platform-build-three-prototypes-first</id><content type="html" xml:base="http://localhost:4000/2018/03/29/excited-by-latest-news-platform-build-three-prototypes-first.html">&lt;p&gt;&lt;em&gt;Reposting something I wrote for &lt;a href=&quot;building.theatlantic.com&quot;&gt;The Atlantic’s product blog.&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have so many toys. If you’re a developer, I’m guessing there’s a new framework you’re itching to try tomorrow. And if you’re a news developer, or involved in news product development, there’s even more to tempt you—AMP Stories, ARKit, chatbots, podcasts, IoT, that 3D graphics library you never manage to find time to crack open…&lt;/p&gt;

&lt;p&gt;All of this stuff is awesome and you should use it to make great journalism. And yet… haven’t we all been in this position?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Product manager:&lt;/strong&gt; Guys, Facebook just released a new feature where you can post a picture of yourself smiling, and it’ll make a hot-dog dance next to your face. What could we do with this?&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Excited developer:&lt;/strong&gt; Oh man, so many things! (skims documentation) And it’s so simple! We need to get on this platform immediately!&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Product manager, now also excited:&lt;/strong&gt; OK! Let’s build something! How many sprints will it take?&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Boss:&lt;/strong&gt; Uh, hold on a second…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am intimately familiar with the rush of adrenaline that comes from hearing about a new platform or technology and &lt;em&gt;needing to build something with it, immediately.&lt;/em&gt; But what if the platform is more annoying to work with than you expected? Or it isn’t a good fit for your users? Or — and this is always the heartbreaking one—what if you just don’t have a good enough idea of how to use it?&lt;/p&gt;

&lt;p&gt;Our team at The Atlantic is mighty and growing mightier, but we’re still small enough that we have to choose our shots carefully. So here’s a proposal: Before you go whole-hog into launching a creative initiative with new tech, build &lt;strong&gt;three completely different prototypes first.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;prototype-prototype-prototype&quot;&gt;Prototype, prototype, prototype&lt;/h2&gt;
&lt;p&gt;By “prototype,” I mean a thing that is proudly held together with duct tape. It is the minimum of your minimum viable product. It is hopelessly bespoke.&lt;/p&gt;

&lt;p&gt;It is also a crucial first step. Without getting your hands dirty, I find it’s very hard to get a sense of how a technology could fit into your systems and editorial workflow. Also, your audience (or a small slice of them) can play with a prototype. Who knows if they even want the latest journalism-hot-dog mashup?&lt;/p&gt;

&lt;p&gt;Here’s the bottom line. If you’re going to spend a bunch of time reading documentation to make a level-of-effort recommendation to your boss anyway, why not make something while you’re at it?&lt;/p&gt;

&lt;p&gt;Well, not something. Three things. You have to make three things. What’s so special about the number three?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;It’s not one.&lt;/strong&gt; Your first idea for this platform might be complete magic. But never test just your first idea. You’re too enthusiastic about it to be objective.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;It’s not two.&lt;/strong&gt; Two ideas means you have a winner and a loser. Don’t give your brain (or your bosses) an excuse to ditch the insights from a “losing prototype” because you built a duopoly. You need to learn from both.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;It gives you permission to move fast and be imperfect.&lt;/strong&gt; When you’re just building one thing, you’ll want to make it perfect. Building two things is definitely a grind, so you’ll end up putting 75 percent of your effort into the idea you like better. But when you have to build three prototypes, all those excuses go out the window. You don’t have time to focus on your favorite, and no one’s expecting you to come up with something production-ready.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So those are the rules. Get excited. Build three things. Put them in front of people. Then figure out the next step.&lt;/p&gt;

&lt;h2 id=&quot;how-we-did-this-with-the-amazon-echo&quot;&gt;How we did this with the Amazon Echo&lt;/h2&gt;
&lt;p&gt;The Atlantic is no stranger to audio — we have two podcasts we love and a slew of audio articles. But we haven’t built anything for smart speakers like the Amazon Echo or Google Home.&lt;/p&gt;

&lt;p&gt;We knew we &lt;em&gt;wanted&lt;/em&gt; to. But the prospect of having to learn an unfamiliar SDK and the difficulty of coming up with a worthwhile idea that could also attract sponsors meant smart speakers always got pushed to the back of the line.&lt;/p&gt;

&lt;p&gt;In February, we resolved to break the stalemate with a prototyping blitz. Oh, and do it within a month.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;On Day 1, we pulled newsroom editors, product leaders and sales reps into a conference room. Their topic of debate: How could smart speakers improve The Atlantic’s journalism, and also present an attractive opportunity to underwriters? Together, this larger group hashed out a few broad areas of interest — quizzes, archive material, scientific and cultural discoveries, and non-political news content.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We then whittled the group down, keeping only the key stakeholders. They refined the broad areas and came up with a list of “prototype candidates” — around a six or seven ideas. (A requirement — they had to have goofy names.) To help the group see potential costs, I found it helpful to plot how hard they would be to &lt;strong&gt;build&lt;/strong&gt; versus &lt;strong&gt;maintain,&lt;/strong&gt; using a chart like the one below:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/build-maintain-chart.png&quot; alt=&quot;A chart showing a nubmer of prototypes plotted along a chart, with &amp;quot;Build&amp;quot; on the x-axis and &amp;quot;Maintain&amp;quot; on the y-axis.&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Voting time! From that smaller list, the stakeholder group picked three ideas to rapidly prototype and test with readers. They ending up selecting the two flash briefing skills, as well as one custom skill. Remember, you have to build three!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Atlantic Product team got to work. For each of the feed skills, we produced a week’s worth of “episodes,” pulling talent from the newsroom to help us write scripts and line up interviews. The custom skill required a bit more work in Node, but also a fair amount of voice acting — let’s just say we discovered some emerging radio talent from the ranks of Atlantic developers. All in all, building the prototypes took two weeks.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Simultaneously, we recruited beta testers from our readership. We’d give them things to listen to over their smart speakers, and they’d fill out a survey after every episode/interaction. We’re lucky to have dedicated Atlanticans who are willing to play around with what we create.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Launch day! All three products went live to various segments of our beta testers. Before long, we started getting feedback through surveys (and by surveys, I mean Google Forms, because what else do you really need?):&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/prototype-net-promoter-score.png&quot; alt=&quot;A bar chart showing how people responded to the classic &amp;quot;How likely are you to recommend this&amp;quot; question.&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This real-time feedback was super helpful, and allowed us to switch things around in the second week of beta testing. By the end of the week, we had hundreds of responses — tons of quantitative and qualitative data to pore through.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s over! We convened a wrap-up meeting to discuss what we learned and what products we wanted to build next.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That was our prototyping blitz. At the end of it, we had a) three working products, b) lots of data about customer preferences, and c) tons of enthusiasm for the next steps, both on our team and among our readers/testers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/prototyping-team.jpeg&quot; alt=&quot;A group of smiling people in front of a wall with The Atlantic's logo.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Maybe you don’t have the time for this approach. (I’m betting you do.) And perhaps the technology you’re looking to test is just too complicated to cram into a one-off prototype. (Is it really?) If that’s the case, I guess you just have to wing it.&lt;/p&gt;

&lt;p&gt;But if you’ve got any flexibility in your pipeline, give yourself permission to rough out a new thing (three things!) and learn along the way what you really want to create.&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">Reposting something I wrote for The Atlantic’s product blog..</summary></entry><entry><title type="html">Atlantic hack day project: Giving you great journalism in every browser tab</title><link href="http://localhost:4000/2017/11/15/giving-you-great-journalism-in-every-browser-tab.html" rel="alternate" type="text/html" title="Atlantic hack day project: Giving you great journalism in every browser tab" /><published>2017-11-15T00:00:00-05:00</published><updated>2017-11-15T00:00:00-05:00</updated><id>http://localhost:4000/2017/11/15/giving-you-great-journalism-in-every-browser-tab</id><content type="html" xml:base="http://localhost:4000/2017/11/15/giving-you-great-journalism-in-every-browser-tab.html">&lt;p&gt;&lt;em&gt;Reposting something I wrote for &lt;a href=&quot;building.theatlantic.com&quot;&gt;The Atlantic’s product blog.&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Every so often on The Atlantic’s Product team, we drop what we’re doing and spend a day messing around. Lots of whiteboards, some frantic coding, usually ending with presentations over beers. We call it a “hack day,” but I think of it more as a talent show for ideas — a chance to take all those concepts we’ve been privately mulling, put them on stage, and see how they perform.&lt;/p&gt;

&lt;p&gt;Today, we’re publicly launching one of the reader-focused projects we prototyped at our last hack day: Serendipity, a Chrome and Firefox extension that displays an awesome piece of Atlantic journalism every time you open a new tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serendipity-example.gif&quot; alt=&quot;A picture of Serendpity in action, rotating through stories.*&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-it-does&quot;&gt;What it does&lt;/h2&gt;
&lt;p&gt;Are you on your desktop computer? Hit Cmd-T (or Ctrl-T, if you’re on a PC).&lt;/p&gt;

&lt;p&gt;OK, now come back. Are you back?&lt;/p&gt;

&lt;p&gt;Good. You probably saw an empty screen, or maybe a Google search bar. Chances are, you don’t think about that page. It’s a blank nothingness, waiting for you to type a URL.&lt;/p&gt;

&lt;p&gt;We saw a canvas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/building-the-atlantic/building-a-slack-bot-to-inspire-serendipity-in-the-office-30dc658f8609&quot;&gt;As I’ve written before,&lt;/a&gt; I’m fascinated by the concept of serendipity, the collision of unrelated things that result in something new. True serendipity is rare, but it can be encouraged. I think that’s what we’re trying to do when we publish a magazine: We take a bunch of ideas, bundle them together, and deliver them to you for inspiration.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;https://www.theatlantic.com/serendipity/&quot;&gt;The Atlantic Serendipity,&lt;/a&gt; we’re aiming to do the same thing. With every new tab, it surprises you with a new piece of journalism. Maybe the article catches your eye, and you read more — or maybe it doesn’t, and you finish typing in the website you were going to visit.&lt;/p&gt;

&lt;p&gt;Either way, you get a bit of delightful (we hope!) randomness, and we get a chance to show you a piece of writing or video we think is really good.&lt;/p&gt;

&lt;h2 id=&quot;how-we-built-it&quot;&gt;How we built it&lt;/h2&gt;
&lt;p&gt;When the team (&lt;a href=&quot;https://www.linkedin.com/in/ana-carano-3a5b7090/&quot;&gt;Ana Carano,&lt;/a&gt; &lt;a href=&quot;https://www.linkedin.com/in/thanh-do-03b9b096/&quot;&gt;Thanh Do,&lt;/a&gt; &lt;a href=&quot;http://kevinmahoney.me/&quot;&gt;Kevin Mahoney,&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/carsontrob?lang=en&quot;&gt;Carson Trobich&lt;/a&gt;) huddled up on Hack Day morning, the only thing we knew was that we wanted to put The Atlantic on someone’s Chrome tab. What it looked like, or even how we’d do it — no idea.&lt;/p&gt;

&lt;p&gt;Our first step was to look at the competition. Here are a few extensions we found helpful for inspiration:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://momentumdash.com/&quot;&gt;Momentum&lt;/a&gt;, the grande dame of them all, with more than 11,000 reviews on the Chrome store. It puts a clock, a quote, and a beautiful picture on your browser, and greets you by name. It also has a number of optional widgets.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://beta.wall.cat/&quot;&gt;Wallcat&lt;/a&gt;. Like Momentum, it displays a new piece of stunning photography every day.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/wandertab-by-hitlist/fobdcmnamenjmkffajcbljjpgiolooeh?hl=en&quot;&gt;Wandertab&lt;/a&gt;. This one is fun: It features airfare deals from the location of your choice, updating frequently.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/mainichi/dfekdjmdikicceaiokcmmchenpilglhn?hl=en&quot;&gt;Mainichi&lt;/a&gt;. Kevin and Thanh were fans of this one, which drops in a flashcard of foreign language vocabulary into each new tab.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After some initial brainstorming, Thanh put together some sketches of three approaches, varying in density and tone:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serendipity-thanh-prototype-1.jpeg&quot; alt=&quot;This one looks a bit like Tweetdeck, with cascading columns of Atlantic stories.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serendipity-thanh-prototype-2.jpeg&quot; alt=&quot;This is simpler, and colored in reverse.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By the end of hack day, we had semi-interactive version of the second design ready to show the rest of the Product team. Folks were intrigued. There were a few complaints, however:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It was monochrome, and didn’t feature any of the photography or graphic art that usually accompanies our stories.&lt;/li&gt;
  &lt;li&gt;Even with just three stories, it was a bit dense.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A week or two after the presentation, I went back to the drawing board and mocked up a simpler version, featuring just one headline, and using our new display font, Noe:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serendipity-andrew-prototype-1.png&quot; alt=&quot;A single story, this time, with a blue background.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hm! Much cleaner. For variety, I played around with having the background tint change every time, cycling through some of our new brand colors. (I also attempted a misbegotten adventure with a shifting animated gradient, which nearly sent my computer’s CPU marching to the picket lines.)&lt;/p&gt;

&lt;p&gt;But was there a way to integrate photography? Turns out that a good number of our display photos looked decent behind the headlines, so long as they were toned correctly to avoid conflicting with the text. I also added an Atlantic logo and a “Next story” button, so people could cycle through without having to open new tabs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serendipity-andrew-prototype-2.png&quot; alt=&quot;Added a photo and a next button.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Right now, the story-recommendation algorithm is simple: We’re just using the our homepage’s RSS feed. The first time you open a new tab, Serendipity pulls the latest stories and stashes them in your browser’s local storage; that means it works even when you’re not connected to the internet (though the photos don’t show up.)&lt;/p&gt;

&lt;p&gt;Every time you pop open a tab, it shows you a different story. After 30 minutes or so, it’ll check back with us to see if there’s new content.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next&lt;/h2&gt;

&lt;p&gt;In October, we debuted Serendipity to The Masthead, The Atlantic’s membership program. Based on their feedback and new responses from you, we’ll be updating the extension as time permits. Some of the ideas we’re fielding:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A “back” button,for those times you glimpse an interesting story just before gmail.com or facebook.com loads;&lt;/li&gt;
  &lt;li&gt;A “quiet” mode, where the same story is shown to you on every new tab, refreshed every half-hour;&lt;/li&gt;
  &lt;li&gt;An accessibility theme, losing the image and switching to high-contrast font and background colors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll see — it all depends on what our readers say. And so I hope you’ll &lt;a href=&quot;https://www.theatlantic.com/serendipity&quot;&gt;give Serendipity a try!&lt;/a&gt; And please let me know what you think at andrew@theatlantic.com. Excited to hear from you.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Endnote:&lt;/em&gt; The New Yorker &lt;em&gt;has published their own cool new-tab Chrome extension &lt;a href=&quot;https://chrome.google.com/webstore/detail/the-new-yorker/apbnnoblhichgncodkjnmlbgmdclkmco?hl=en&quot;&gt;here.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">Reposting something I wrote for The Atlantic’s product blog..</summary></entry><entry><title type="html">Using computer vision to figure out the best time to visit the DMV</title><link href="http://localhost:4000/2017/05/22/the-results-of-my-DMV-camera-experiment.html" rel="alternate" type="text/html" title="Using computer vision to figure out the best time to visit the DMV" /><published>2017-05-22T00:00:00-04:00</published><updated>2017-05-22T00:00:00-04:00</updated><id>http://localhost:4000/2017/05/22/the-results-of-my-DMV-camera-experiment</id><content type="html" xml:base="http://localhost:4000/2017/05/22/the-results-of-my-DMV-camera-experiment.html">&lt;p&gt;Last summer — it &lt;em&gt;does not&lt;/em&gt; feel that long ago — &lt;a href=&quot;/2016/07/18/make-every-week-dmv-tracker.html&quot;&gt;I launched a script&lt;/a&gt; to record data from the District of Columbia Department of Motor Vehicles’ &lt;a href=&quot;https://dmv.dc.gov/page/customer-webcams-georgetown-service-center&quot;&gt;live webcam feeds&lt;/a&gt;, which monitor the waiting room of the main service station in Georgetown.&lt;/p&gt;

&lt;p&gt;Every minute, my code “counted” the number of empty seats present, building a database that could tell you, with extremely fine granularity, exactly how busy the DMV was. (Take a look at the link above for an explanation of how that worked.)&lt;/p&gt;

&lt;p&gt;I planned to let it run for a month. But then I forgot about it; the script actually ran for three months (at which point my free Heroku MySQL database ran out of memory). Happy accident!&lt;/p&gt;

&lt;p&gt;Packing all that data into a visualization that lays out the center’s relatively crowdedness over the course of the “average” week actually shows some interesting trends:&lt;/p&gt;

&lt;div id=&quot;chart&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;https://s3-us-west-2.amazonaws.com/nationaljournal/libraries/pym.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
var pymParent = new pym.Parent('chart', 'https://s3.amazonaws.com/the-atlantic/dc-dmv-display/index.html', {});
&lt;/script&gt;

&lt;p&gt;First, the service center is closed on Sunday and Monday, so those days registered no data. Lop ‘em off.&lt;/p&gt;

&lt;p&gt;Second, Saturday is the busiest day. I expected that — most people have to wait for the weekend to get enough free time to slog through renewing their their licenses. The worst time to show up is 12-1 p.m. on Saturday, when crowds are at least 60 percent larger than average.&lt;/p&gt;

&lt;p&gt;But then there’s Thursday, which for some reason is a relative respite at the DMV. The whole morning is far less busy than average, with the 10 a.m. hour being the least crowded of the week. And the rest of the day is on par.&lt;/p&gt;

&lt;p&gt;What is it about &lt;em&gt;Thursday&lt;/em&gt;? I’m going to have to do more investigation here. Maybe the staff closes off part of the service center for cleaning, fooling the camera algorithm into thinking the whole place is less busy?&lt;/p&gt;

&lt;p&gt;Regardless, it’s a fun conclusion to a little experiment I started a year ago. I only wish I had sprung for a paid Heroku instance… we could be working with a whole &lt;em&gt;year&lt;/em&gt; of data if the database hadn’t tapped out!&lt;/p&gt;

&lt;p&gt;But even from this, there’s a clear takeaway: &lt;strong&gt;go to the DMV on Thursday.&lt;/strong&gt;&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">Last summer — it does not feel that long ago — I launched a script to record data from the District of Columbia Department of Motor Vehicles’ live webcam feeds, which monitor the waiting room of the main service station in Georgetown.</summary></entry><entry><title type="html">Can a Slack bot inspire serendipity at work?</title><link href="http://localhost:4000/2017/03/18/finding-serendipity-at-the-atlantic.html" rel="alternate" type="text/html" title="Can a Slack bot inspire serendipity at work?" /><published>2017-03-18T00:00:00-04:00</published><updated>2017-03-18T00:00:00-04:00</updated><id>http://localhost:4000/2017/03/18/finding-serendipity-at-the-atlantic</id><content type="html" xml:base="http://localhost:4000/2017/03/18/finding-serendipity-at-the-atlantic.html">&lt;p&gt;At any given moment, people are doing some pretty neat stuff at &lt;em&gt;The Atlantic.&lt;/em&gt; Just last week, my coworkers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Wrote a story about &lt;a href=&quot;https://www.theatlantic.com/science/archive/2017/03/snake-vs-snake/519696/&quot;&gt;snakes that are good at killing other snakes;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Experimented with how to hype a magazine story &lt;a href=&quot;https://www.instagram.com/p/BReEOpLD8zm/&quot;&gt;in a really cool way on Instagram;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compiled a &lt;a href=&quot;https://www.theatlantic.com/photo/2017/03/mount-etna-europes-most-active-volcano/519681/&quot;&gt;crazy photo essay on Mount Etna,&lt;/a&gt; Europe’s most active volcano.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But here’s the sad truth: I  only see a tiny percentage of the things my officemates make. I just don’t have enough time in the day to read through every story on &lt;a href=&quot;https://theatlantic.com&quot;&gt;theatlantic.com.&lt;/a&gt; And even if I could, I’d still miss all the things our events staffers are planning, or what the product team is coding, or what the graphic artists are cooking up…&lt;/p&gt;

&lt;p&gt;We all work in the same building, but I know very little about what people outside my own team (politics) do on a daily basis. And although I don’t really &lt;em&gt;need&lt;/em&gt; to, I wondered if there was a way to introduce some serendipity into our working lives.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Why is serendipity even important?&lt;/strong&gt; &lt;br /&gt;
This probably deserves a longer answer, and at some point, I’ll write a standalone post.&lt;/p&gt;
  &lt;p&gt;For now, here’s my best shot: Encouraging serendipity at an organization makes room for happy accidents, where something unexpected results from the collision of two separate things. Some of my favorite projects have come from chance conversations — and they’re usually something neither me nor my conversation partner would have developed alone.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;enter-serendipitybot&quot;&gt;Enter SerendipityBot&lt;/h2&gt;
&lt;p&gt;They say that if &lt;a href=&quot;https://en.wiktionary.org/wiki/if_all_you_have_is_a_hammer,_everything_looks_like_a_nail&quot;&gt;all you have is a hammer, everything looks like a nail.&lt;/a&gt; I’m trying to be more careful about jumping to a technical solution when something might just need a simple conversation — or might not be a problem at all.&lt;/p&gt;

&lt;p&gt;But in this case, I felt pretty confident about my idea: &lt;strong&gt;What if we had a Slack bot that unobtrusively asked random staffers about what’s energizing them this week, and then shared that with the office at large?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here was my idea:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I’d make a Slack #serendipity channel where people who are interested in learning about what their coworkers do — and telling their own stories — could join and engage in conversation;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’d code a Slack bot that would randomly ping people from that channel to share what they’re passionate about at that moment, at an interval of no more than once every two weeks or so.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Every day, the bot would ping coworkers during working hours until it had three responses. And at a set time, it would post all three to the #serendipity channel as a small blog post.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Would anyone even want to participate? I floated a trial balloon:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serendipity-pitch.png&quot; alt=&quot;i’m considering an experiment: i enjoy learning via serendipity what my non-political coworkers are working on and wondered if there was a way to find out more intentionally. i’m rigging up a slackbot that would a) ping random dot-com folks at non-annoying intervals (every few weeks?) to ask what they’re writing/coding/videoing about and b) distill that into a occasional digest on a special slack channel. could be a neat place to get some ideas or offer suggestions. if you’re interested in being a part of the beta, throw me a robot emoji here!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK, so I wasn’t crazy! Those 25 people became my beta testers.&lt;/p&gt;

&lt;p&gt;First job was figuring out what the bot would say to people. I wanted it to be chill and non-threatening, and give people the option of ducking out — but also be fairly direct.&lt;/p&gt;

&lt;p&gt;Here’s what I ended up with:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serendipity-intro.png&quot; alt=&quot;Hi! I'm SerendipityBot, created by @andrewmcgill. I ask random Atlantic people what they're working on this week that excites them, and share a brief digest every day in #serendipity. It's a fun way to get an idea of the cool things your coworkers are doing. Want to partipate? If so, tell me something you're working on this week that you'd like to share, in the form of &amp;quot;I am *building a rocket,*&amp;quot; or &amp;quot;I'm *writing about Capt. Jean-Luc Picard*.&amp;quot; If you don't want me to bug you right now, reply *&amp;quot;snooze.&amp;quot;* If you never want to hear from me again (:sob:), type *&amp;quot;I hate you.&amp;quot;*&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The bot waits a while for an answer. If it doesn’t get one, it nudges politely: “I’ll ask one more time before leaving you alone: Any chance you want to share a cool thing you’re working on this week?”&lt;/p&gt;

&lt;p&gt;It’s key, by the way, to give people a way to let the bot know they don’t really have anything they want to share. Sometimes, you’re just not working on anything exciting at the moment. Or maybe you’re too busy. In that case, the bot happily accepts &lt;code class=&quot;highlighter-rouge&quot;&gt;snooze&lt;/code&gt; and leaves the person alone for two weeks.&lt;/p&gt;

&lt;p&gt;Right now, I have the bot pinging a random employee every 10 minutes, from 11 a.m. to 2 p.m., Monday through Friday. Once it gets three responses, it stops for the day. (Of course, sometimes people respond a few hours late, after the quota has already been filled, so we’ll occasionally have four or even five responses in a single day.)&lt;/p&gt;

&lt;p&gt;At the stroke of 2:30 p.m. — I originally set it for the next morning, but people didn’t like waiting a whole day to see their responses go up — the bot posts in #serendipity.&lt;/p&gt;

&lt;p&gt;Here’s an example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serendipity-example.png&quot; alt=&quot;A slack conversation initated by the bot that culminates in a picture of a panther with a breathing mask.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-has-this-experiment-turned-out&quot;&gt;How has this experiment turned out?&lt;/h2&gt;
&lt;p&gt;Pretty well. More than 70 people have joined the #serendipity channel — somewhere around a quarter of the entire &lt;em&gt;Atlantic&lt;/em&gt; Slack community. SerendipityBot had some hiccups: It spammed a bunch of people on Martin Luther King Jr. Day, which is on a Monday, when the bot thought everyone would be working. But overall, I think it has made each day a teensy bit more delightful.&lt;/p&gt;

&lt;p&gt;What’s the long term impact? I don’t know. So far, I haven’t seen The Next Big Atlantic Idea bubble up from a conversation in #serendipity. But that’s not really the point. Getting to know your coworkers better is a worthy goal on its own — and I think SerendipityBot has helped with that.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’d like to look at the code powering SerendipityBot, &lt;a href=&quot;https://github.com/arm5077/sup-slackbot&quot;&gt;it’s available here.&lt;/a&gt; Tldr: It’s a Node app that lives on Heroku and stores user information in a MongoDB database.&lt;/em&gt;&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">At any given moment, people are doing some pretty neat stuff at The Atlantic. Just last week, my coworkers:</summary></entry><entry><title type="html">Turning an Amazon IoT button into something actually useful with (almost) no code</title><link href="http://localhost:4000/2016/12/18/turning-an-amazon-iot-button-into-something-useful-with-almost-no-code.html" rel="alternate" type="text/html" title="Turning an Amazon IoT button into something actually useful with (almost) no code" /><published>2016-12-18T00:00:00-05:00</published><updated>2016-12-18T00:00:00-05:00</updated><id>http://localhost:4000/2016/12/18/turning-an-amazon-iot-button-into-something%20useful-with-almost-no-code</id><content type="html" xml:base="http://localhost:4000/2016/12/18/turning-an-amazon-iot-button-into-something-useful-with-almost-no-code.html">&lt;p&gt;I’m pretty nuts for &lt;a href=&quot;https://aws.amazon.com/iotbutton/&quot;&gt;Amazon’s internet-of-things button.&lt;/a&gt; I’ve already made a &lt;a href=&quot;http://www.andrewmcgill.me/2016/07/05/make-every-week-2-slack-doorbell.html&quot;&gt;Slack doorbell&lt;/a&gt; for my office and a &lt;a href=&quot;http://www.andrewmcgill.me/2016/08/19/make-every-week-sweetgreen-salad-button.html&quot;&gt;push-to-order Sweetgreen button.&lt;/a&gt; But both of these projects required a fair amount of programming.&lt;/p&gt;

&lt;p&gt;Why is this button interesting? Gooood question. I mean, you can’t do much with it, besides press it. But:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;It combined a mechanical sensor with built-in WiFi, in a package that costs $20.&lt;/strong&gt; That’s actually pretty incredible. Even the cheapest DIY setup would easily clock in at $30 or more, and would mostly likely be a great deal more bulky.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;It ties into Amazon’s &lt;em&gt;Lambda&lt;/em&gt; service.&lt;/strong&gt; A few years ago, to do anything on the internet, you had to rent a server. They weren’t necessarily &lt;em&gt;expensive&lt;/em&gt; — Amazon’s been in the server game for a decade — but they could be knowledge-intensive. You still had to do all the annoying initializing/maintenance stuff that many coders didn’t care for.&lt;/p&gt;

    &lt;p&gt;Services like Lamda abstract this aaway — you pop in your code, and Amazon worries about the rest.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So it’s a pretty neat little button!&lt;/p&gt;

&lt;h2 id=&quot;that-said&quot;&gt;That said…&lt;/h2&gt;

&lt;p&gt;It’s not terribly useful if you don’t know how to program a computer. Amazon doesn’t hold your hand. You basically get a box to write code in, some weird parameters, and Lambda bids you good luck. For a novice, that’s pretty intimidating.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/lambda_example.gif&quot; alt=&quot;Eeek! My Sweetgreen app, as it appears in Lambda.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the other end of the spectrum is &lt;a href=&quot;http://www.ifttt.com&quot;&gt;IFTTT.com&lt;/a&gt;, an automation website that does a really good job of abstracting code into something easier to understand. The site (it stands for &lt;strong&gt;If This, Then That&lt;/strong&gt;) links together completely separate services — Twitter, Hue lightbulbs, thermostats — and allows events from one to trigger actions in another.&lt;/p&gt;

&lt;p&gt;Combinations that sound very complicated — &lt;em&gt;hmm, can I send a&lt;/em&gt; 🙄 &lt;em&gt;tweet whenever I receive an email from my crazy uncle?&lt;/em&gt; — become a matter of clicking and dragging various services together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ifttt_example.gif&quot; alt=&quot;Ahhhh. Sweet automation.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If only Amazon’s IoT service could be so intuitive…&lt;/p&gt;

&lt;h2 id=&quot;but-it-can-be&quot;&gt;But it can be!&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;It just takes a bit of boilerplate code,&lt;/strong&gt; thanks to IFTTT’s &lt;a href=&quot;https://ifttt.com/maker&quot;&gt;Maker &lt;/a&gt; extension. Maker is sort of a general-purpose receiver, allowing people to trigger an action by sending a ping from an outside server through a humble POST request. (If you’re not familiar with HTTP protocol, a POST request is one of the four or five simplest messages servers use to talk to each other.)&lt;/p&gt;

&lt;p&gt;Programmatically, sending an HTTP request is super easy — pretty much any server can do it. And since you can write code to send the POST message yourself, it frees you from needing a device that already has a partnership with IFTTT.&lt;/p&gt;

&lt;p&gt;So you could have a motion detector, hooked up to a Raspberry Pi, that tells IFTTT to text you every time someone walks past your desk. Or a water sensor, also connected to a Raspberry Pi, that pings IFTTT every time the cat’s water bowl gets low. In both cases, the Pi would take care of sending the ping.&lt;/p&gt;

&lt;p&gt;In this case, Amazon’s Lambda service will take the place of the Pi (remember, we don’t need servers anymore?), pinging IFTTT every time we press the IoT button. For this demonstration, I’m going to make my button do something simple: &lt;strong&gt;tweet “Man, it’s a hot one” from my Twitter account.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-up-ifttt&quot;&gt;Setting up IFTTT&lt;/h2&gt;

&lt;p&gt;Let’s do the easy bit first: Making our Twitter IFTTT action.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Head to IFTTT and make a &lt;a href=&quot;https://ifttt.com/create&quot;&gt;new applet.&lt;/a&gt; (You’ll have to sign up for an account if you haven’t already.)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click &lt;strong&gt;“+this”&lt;/strong&gt; to make a new trigger. It’ll give a wide array of options, but filter for &lt;strong&gt;“Maker.”&lt;/strong&gt;
&lt;img src=&quot;/assets/ifttt_maker_option.png&quot; alt=&quot;The Maker option on IFTTT's website.&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose the &lt;strong&gt;“Recieve a web request”&lt;/strong&gt; option. It’ll prompt you to give the trigger a name. I’m calling mine &lt;code class=&quot;highlighter-rouge&quot;&gt;santana-button-pressed&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now, we’ll choose the action: sending a tweet. Click &lt;strong&gt;“+that”&lt;/strong&gt; and filter to Twitter, selecting &lt;strong&gt;“Post a tweet.”&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write your preferred tweet text. Here’s mine:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/iot-tweet-text.png&quot; alt=&quot;Man, it's a hot one tweet text&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After I saved the applet, I had a bit of trouble finding the URL I was supposed to use to send a POST request to Maker. If you click “Maker” in the breadcrumb menu in the upper-left, and then click “Settings” on the main Maker page, you’ll get a URL under “Account info.” Following &lt;em&gt;that&lt;/em&gt; takes you to your credential page. Whew!&lt;/p&gt;

    &lt;p&gt;Now you have the URL you’ll need to POST — a combination of your trigger name and your Maker key. For instance, mine starts &lt;code class=&quot;highlighter-rouge&quot;&gt;https://maker.ifttt.com/trigger/santana-button-pressed/with/key/&lt;/code&gt; (followed by my key). Save this!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;writing-the-node-code-to-upload-to-lambda&quot;&gt;Writing the Node code to upload to Lambda&lt;/h2&gt;

&lt;p&gt;Now, we have to write a simple script for Lambda that sends a POST request every time the button is pushed. The POST request itself doesn’t even have to contain any information — we’ve already told IFTTT what to tweet.&lt;/p&gt;

&lt;p&gt;Here’s my walk-through in Node. (If you’re not interested, here’s the &lt;a href=&quot;https://github.com/arm5077/ifttt-button/archive/master.zip&quot;&gt;code&lt;/a&gt; you’ll need for the next part, when we upload our code to Lambda.)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Start a new project folder. We’ll use the &lt;strong&gt;requests&lt;/strong&gt; module to send the POST ping, so install that using &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install requests --save&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make a main file for your code — &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; works fine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All Lambda Node scripts are written as modules, meaning we’ll have to encase our code in a function and include it as a &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; property. So let’s start off with this:&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ifttt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Everything else will go inside here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now let’s import the &lt;strong&gt;request&lt;/strong&gt; library and make the actual request.&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ifttt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'request'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IFTTT_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sent ping to IFTTT!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Pretty simple. We make a POST request to our IFTTT endpoint, throw an error if one returns, and otherwise print that all is well. You’ll note that we don’t actually include the endpoint in the code — we’re telling Node to pull it from an environmental variable, which we’ll specify when we set up Lambda. This is better for security… you don’t wnat your private key floating around on Github.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you’ve got that written, select all the files (&lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;, etc.) and compress into a zip archive.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-iot-button-and-uploading-code-to-lambda&quot;&gt;Setting up IoT button and uploading code to Lambda&lt;/h2&gt;

&lt;p&gt;I’m presuming that you’re staring at a new IoT button in your hand and wondering what to do. Skip ahead if you’ve already done some of these steps.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Log into &lt;a href=&quot;the Amazon Web Service console.&quot;&gt;https://aws.amazon.com&lt;/a&gt; Once there, select the &lt;strong&gt;“AWS IoT”&lt;/strong&gt; service. Clicking &lt;strong&gt;“Connect”&lt;/strong&gt; on the left rail will give you a new spread of menu options, one of which is &lt;strong&gt;“AWS IoT Button.”&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/iot-opener.png&quot; alt=&quot;The IoT config opening screen.&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scroll down and click &lt;strong&gt;“Go to Configuration Wizard.”&lt;/strong&gt; You’ll have to type in your serial number, which is printed on the back of the button. &lt;strong&gt;Make sure you click “Generate certificate and keys” before you move on!&lt;/strong&gt; You’ll be given two files to download, and I don’t know how to get these otherwise. Also note the endpoint and region.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also make sure you click &lt;strong&gt;“Enable trigger”&lt;/strong&gt; before you click “Next.” Then (finally!) click “Next.”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We’re now at the “Configure function” section. Type &lt;code class=&quot;highlighter-rouge&quot;&gt;ifttt&lt;/code&gt; into &lt;strong&gt;Name&lt;/strong&gt;, and write whatever description you’d like. Down at &lt;strong&gt;Lambda function code,&lt;/strong&gt; change “Code entry type” to “Upload a .ZIP file.” You’ll then upload the zip archive we compressed a few steps ago.&lt;/p&gt;

    &lt;p&gt;(Why aren’t we just copying-and-pasting our code? It’s that pesky &lt;strong&gt;requests&lt;/strong&gt; library — the meat of it is included in the &lt;strong&gt;node_modules&lt;/strong&gt; folder, so we need to include everything.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure you add an environmental variable, named &lt;code class=&quot;highlighter-rouge&quot;&gt;IFTTT_KEY&lt;/code&gt;, that lists the Maker URL you took from IFTTT.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lastly, give the button code a descriptive &lt;strong&gt;role name&lt;/strong&gt; — I did &lt;code class=&quot;highlighter-rouge&quot;&gt;ifttt_button&lt;/code&gt;. Click “Next,” and then “Create function.”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OK! Your code &lt;em&gt;should&lt;/em&gt; be uploaded. Only thing left to do is connect your IoT button to your home or office WiFi. Amazon has a &lt;a href=&quot;http://docs.aws.amazon.com/iot/latest/developerguide/configure-iot.html&quot;&gt;pretty good set of directions here,&lt;/a&gt; so I’ll let them explain. Just remember that you’ll need those credentials you downloaded earlier! (And if you missed them, you’ll find your endpoint by clicking “Settngs” at the &lt;a href=&quot;https://console.aws.amazon.com/iot/home?region=us-east-1#/dashboard/help&quot;&gt;AWS IoT console.&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Give it a shot. Boom!&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;
  &lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Man, it's a hot one— Andrew McGill (@andrewmcgill) &lt;a href=&quot;https://twitter.com/andrewmcgill/status/810657716947587072&quot;&gt;December 19, 2016&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;The button will now do your bidding.&lt;/p&gt;

&lt;h2 id=&quot;final-notes&quot;&gt;Final notes&lt;/h2&gt;
&lt;p&gt;You can obviously set up your IFTTT account to do whatever you want, which is the beauty of this hack. I will note that I had a tough time getting my button to connect to my apartment WiFi until I realized it only can communicate with 2.4 GHz networks. If you’re running into connectivity issues (hint: the button’s LED will flash red three times), try poking around in your router settings.&lt;/p&gt;

&lt;p&gt;Other than that, happy button-pushing!&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">I’m pretty nuts for Amazon’s internet-of-things button. I’ve already made a Slack doorbell for my office and a push-to-order Sweetgreen button. But both of these projects required a fair amount of programming.</summary></entry><entry><title type="html">Make Every Week, Part 5: A real-life Harry Potter Lumos spell, using speech recognition</title><link href="http://localhost:4000/2016/11/22/real-life-harry-potter-lumos-spell-snowboy.html" rel="alternate" type="text/html" title="Make Every Week, Part 5: A real-life Harry Potter Lumos spell, using speech recognition" /><published>2016-11-22T00:00:00-05:00</published><updated>2016-11-22T00:00:00-05:00</updated><id>http://localhost:4000/2016/11/22/real-life-harry-potter-lumos-spell-snowboy</id><content type="html" xml:base="http://localhost:4000/2016/11/22/real-life-harry-potter-lumos-spell-snowboy.html">&lt;p&gt;I don’t think of myself as a &lt;em&gt;Harry Potter&lt;/em&gt; fan, but I somehow know a crapload of magic spells from the famous book series. &lt;em&gt;Alohomora&lt;/em&gt; was useful for unlocking doors; &lt;em&gt;Expelliarmus&lt;/em&gt; would disarm an opponent of her wand. But one of the simplest was &lt;em&gt;Lumos&lt;/em&gt;, which lit the tip of a wizard’s wand, along with its counterpart &lt;em&gt;Nox&lt;/em&gt;, which extinguished the light.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/lumos_harry_potter.jpg&quot; alt=&quot;Severus Snape uses the Lumos spell.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Speech recognition has always seemed a bit like magic to me, too. But as I poked around &lt;a href=&quot;https://github.com/alexa/alexa-avs-sample-app&quot;&gt;the open-source work&lt;/a&gt; being done using the Amazon Alexa Voice Service platform (which powers the Amazon Echo, Dot, etc.), I found &lt;a href=&quot;https://github.com/Kitt-AI/snowboy&quot;&gt;Snowboy&lt;/a&gt;. It’s a pretty neat “wake-word-as-service” library that’s free for hackers (real apps have to pay money), and uses machine learning to recognize the desired phrase. It’s especially nice because it doesn’t need the internet to work — after you train the algorithm online using your own voice, Snowboy gives you a downloadable file that hooks up with its library offline.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hmm&lt;/em&gt;, I thought. &lt;em&gt;Could Snowboy help me achieve my dream of becoming an actual wizard?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Voila:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;
  &lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Last week needed some Raspberry Pi-powered ACTUAL HARRY POTTER MAGIC. Explainer post coming soon &lt;a href=&quot;https://t.co/u5AK25e3MG&quot;&gt;pic.twitter.com/u5AK25e3MG&lt;/a&gt;— Andrew McGill (@andrewmcgill) &lt;a href=&quot;https://twitter.com/andrewmcgill/status/798237324043816965&quot;&gt;November 14, 2016&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;building-the-lumos-lamp&quot;&gt;Building the Lumos Lamp&lt;/h2&gt;
&lt;p&gt;The goal was to turn on a lamp (or several) by saying “Lumos!” out loud. Since I’m not comfortable enough with electrical engineering to hardwire a lamp’s power supply directly through my Raspberry Pi, I ended up buying the &lt;a href=&quot;https://www.adafruit.com/product/268&quot;&gt;Powerswitch Tail 2&lt;/a&gt;, essentially an extension cord that can be powered on and off programmatically by a micontroller.&lt;/p&gt;

&lt;p&gt;Here are the materials I used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Raspberry Pi 2 (Model B in my case) with Raspbian installed&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/gp/product/B00IR8R7WQ/ref=oh_aui_detailpage_o01_s00?ie=UTF8&amp;amp;psc=1&quot;&gt;A USB microphone&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adafruit.com/product/268&quot;&gt;Powerswitch Tail 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adafruit.com/products/826&quot;&gt;A bunch of male-female jumper wires&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/AmazonBasics-6-Outlet-Surge-Protector-2-Pack/dp/B014EKQ5AA/ref=zg_bs_10967801_1?_encoding=UTF8&amp;amp;psc=1&amp;amp;refRID=G27MRDKAWFC2Q66CR6H0&quot;&gt;Generic power strip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;First, set up the Raspberry Pi.&lt;/strong&gt; (Snowboy has &lt;a href=&quot;http://docs.kitt.ai/snowboy/#quick-start&quot;&gt;some good documentation here.&lt;/a&gt;) Presuming you’ve booted up the Pi and connected it to the internet, plug in your USB microphone. You’ll need to install some audio dependencies from the command line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install python-pyaudio python3-pyaudio sox
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can check to see if that worked by running &lt;code class=&quot;highlighter-rouge&quot;&gt;rec test.wav&lt;/code&gt;, speaking into the microphone for a few seconds, and then &lt;code class=&quot;highlighter-rouge&quot;&gt;aplay test.wav&lt;/code&gt;. (You may need to do some more fiddling — &lt;a href=&quot;http://docs.kitt.ai/snowboy/#running-on-pi&quot;&gt;troubleshooting advice here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;At this point, it’s probably best to set up your project folder. I used Node.js to code this project, so we need to initiate NPM and install a &lt;code class=&quot;highlighter-rouge&quot;&gt;snowboy&lt;/code&gt;, which will run our Pi’s speech recognition, &lt;code class=&quot;highlighter-rouge&quot;&gt;onoff&lt;/code&gt;, which handles switching the power source, and &lt;code class=&quot;highlighter-rouge&quot;&gt;node-record-lpcm16&lt;/code&gt;, a Node-specific audio recording library.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm init
npm install snowboy --save
npm install onoff --save
npm install node-record-lpcm16 --save
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Now, train Snowboy to understand your voice.&lt;/strong&gt; I’d do this one a laptop with a built-in microphone, not your Pi. Visit &lt;a href=&quot;https://snowboy.kitt.ai/&quot;&gt;Snowboy’s site&lt;/a&gt; (Firefox seemed to work better for me), make an account and create a new hotword. After you repeat the word three times, Snowboy will give you a &lt;code class=&quot;highlighter-rouge&quot;&gt;.pmdl&lt;/code&gt; file — that’s the key. Transfer it over to your Pi; I emailed it to myself and just downloaded it from the Pi’s web browser. I ended up making two hotwords — “lumos,” to turn the light on, and “nox,” to turn it off.&lt;/p&gt;

&lt;p&gt;Drop the .pmdl file into your project folder, and make &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;, which will contain your main code. &lt;a href=&quot;https://gist.github.com/arm5077/ef498a7e31e4d799431d5ce734898907&quot;&gt;Here’s what I ended up putting together,&lt;/a&gt; initializing a detector and adding two hotword models. The &lt;code class=&quot;highlighter-rouge&quot;&gt;detector.on('hotword')&lt;/code&gt; function fires whenever I say “lumos” or “nox,” so that’s where I’ve stuck the pin logic.&lt;/p&gt;

&lt;p&gt;Speaking of pins…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time to wire this together.&lt;/strong&gt; Here’s my setup:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/lumos wiring diagram.JPG&quot; alt=&quot;The wiring setup between the Powerswitch and the Pi.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I got some basic wiring advice from &lt;a href=&quot;https://learn.adafruit.com/adafruits-raspberry-pi-lesson-13-power-control/overview&quot;&gt;this tutorial&lt;/a&gt;, but essentially, the purple wire connects to one of the Pi’s ground pins, and the blue wire connects to pin 15. You’ll see that I unscrewed the Powertail’s casing — the terminals were a bit hard to reach with the male end of the wire otherwise.&lt;/p&gt;

&lt;p&gt;With finished, you’re probably ready to give this a shot! I connected the Powertail to an extension cord that plugged into the wall outlet, and then linked the other end of the Powertail with a regular power strip. I ended up plugging three lights into the strip — my floor lamp, a desk lamp and my architect light.&lt;/p&gt;

&lt;p&gt;When you run &lt;code class=&quot;highlighter-rouge&quot;&gt;node index.js&lt;/code&gt;, you should hear a click as the Powertail switches off. (The red LED indicator stays on, so you know it’s working.) Stand back, and authoritatively say “Lumos!”&lt;/p&gt;

&lt;p&gt;With any luck, the light will switch on — and you’ll officially be a member of the wizarding world.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ron_fail.gif&quot; alt=&quot;Ron Weasley failing at being a wizard.&quot; /&gt;&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">I don’t think of myself as a Harry Potter fan, but I somehow know a crapload of magic spells from the famous book series. Alohomora was useful for unlocking doors; Expelliarmus would disarm an opponent of her wand. But one of the simplest was Lumos, which lit the tip of a wizard’s wand, along with its counterpart Nox, which extinguished the light.</summary></entry><entry><title type="html">How to code a virtual Internet of Things device to tempt hackers</title><link href="http://localhost:4000/2016/11/02/making-a-honeypot-to-tempt-the-mirai-botnet.html" rel="alternate" type="text/html" title="How to code a virtual Internet of Things device to tempt hackers" /><published>2016-11-02T00:00:00-04:00</published><updated>2016-11-02T00:00:00-04:00</updated><id>http://localhost:4000/2016/11/02/making-a-honeypot-to-tempt-the-mirai-botnet</id><content type="html" xml:base="http://localhost:4000/2016/11/02/making-a-honeypot-to-tempt-the-mirai-botnet.html">&lt;p&gt;Earlier this month, hackers used a massive botnet to spam Dyn, a domain name service provider, and block access to dozens of popular websites. It turns out &lt;a href=&quot;https://github.com/jgamblin/Mirai-Source-Code&quot;&gt;the worm that recruited the botnet&lt;/a&gt; targeted IP-connected devices, including an old brand of webcam popular in warehouses and industrial settings.&lt;/p&gt;

&lt;p&gt;Scanning the internet for open ports, the Mirai worm connected to unsecured servers and ran through a common dictionary of passwords, including &lt;code class=&quot;highlighter-rouge&quot;&gt;xc3511&lt;/code&gt;, which unlocked the webcams. (There’s a good writeup on the mechanics of the bot &lt;a href=&quot;https://www.incapsula.com/blog/malware-analysis-mirai-ddos-botnet.html&quot;&gt;here.&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Let me first say that &lt;a href=&quot;https://www.wired.com/2016/10/internet-outage-webcam-dvr-botnet/&quot;&gt;this didn’t affect many residential users.&lt;/a&gt; Very few people plug their devices directly into their modem; pretty much everyone filters their traffic through a router, which has ample safeguards. Plus, many of the devices targeted by Mirai were super old.&lt;/p&gt;

&lt;p&gt;All the same, I wondered if this was really a big deal. The internet is huge—there are &lt;em&gt;so many&lt;/em&gt; IPv4 addresses out there. Even if I had been playing fast and loose with security, weren’t the odds astronomically small that a hacker would randomly happen across my server and take notice?&lt;/p&gt;

&lt;p&gt;So I devised an experiment.&lt;/p&gt;

&lt;h2 id=&quot;my-fake-web-toaster&quot;&gt;My fake web toaster&lt;/h2&gt;
&lt;p&gt;I decided to set up a honeypot—a purposefully unsecured server that would give hackers the illusion of control, but would actually record their keystrokes and IP addresses. I could have used a Raspberry Pi and connected it to my home router (using port forwarding to bypass security), but in the interest of time, I ended up running a virtual server through Amazon’s EC2 service.&lt;/p&gt;

&lt;p&gt;I wrote &lt;a href=&quot;https://github.com/arm5077/mirai-honeypot/blob/master/index.js&quot;&gt;a Node script&lt;/a&gt; that mimicked a Telnet login on port 23, asking for a username and password, and delivering a faux shell prompt. To a hacker’s scanning script, it would look like a real Telnet server. In honor of one of the internet’s &lt;a href=&quot;http://www.livinginternet.com/i/ia_myths_toast.htm&quot;&gt;first connected devices,&lt;/a&gt; I had it masquerade as a web-connected toaster. Here’s what the hacker would have seen when they tried to log in:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/intro-cli.gif&quot; alt=&quot;The fake command line interface.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I set the thing up and stepped away, expecting to wait a while before recording a hacking attempt. Wrong. The first unauthorized login came within an hour, using &lt;code class=&quot;highlighter-rouge&quot;&gt;root:root&lt;/code&gt; as login credentials.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/hack-attempt.gif&quot; alt=&quot;The fake command line interface.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Over the course of the next 12 hours, the server registered around 300 attempted hacks. I wrote about this experiment for &lt;em&gt;The Atlantic&lt;/em&gt; &lt;a href=&quot;https://www.theatlantic.com/technology/archive/2016/10/we-built-a-fake-web-toaster-and-it-was-hacked-in-an-hour/505571/&quot;&gt;here&lt;/a&gt; (and talked about it on &lt;a href=&quot;http://www.npr.org/sections/alltechconsidered/2016/11/01/500253637/an-experiment-shows-how-quickly-the-internet-of-things-can-be-hacked&quot;&gt;&lt;em&gt;All Things Considered&lt;/em&gt;!&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;what-does-this-tell-us&quot;&gt;What does this tell us?&lt;/h2&gt;
&lt;p&gt;I admit that this project is flawed in a few ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;It wasn’t a real IoT device.&lt;/strong&gt; This doesn’t bother me quite as much; the Mirai bot doesn’t seem to exploit any device-specific security bugs, so a generic server with an open port fills the role fine. But there’s no doubt that &lt;em&gt;other&lt;/em&gt; worms take advantage of weaknesses inherent to specific IoT gadgets, so it would be interesting to more closely simulate them.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;I didn’t conduct the test over residential wireless.&lt;/strong&gt; I bet hackers closely monitor Amazon’s IP range, looking for unsecured server instances spun up by rookies. If I had run my script through my apartment’s internet connection, I probably would have seen fewer login attempts. That said, the security folks I spoke with agreed any unsecured server would have eventually been breached, probably within a day to a week.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Most consumer IoT devices don’t connect to the internet directly.&lt;/strong&gt; Like I said above, most routers will kill the most obvious routes hackers use to gain control of computers. So the average person hooking up a webcam to their WiFi is probably OK. It would be interesting to simulate the security defects of older routers, and try to get a sense of how many of those exist in the wild.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IPv6 might solve these problems.&lt;/strong&gt; The new protocol allows for &lt;em&gt;way&lt;/em&gt; more possible addresses—like, 7.9x10&lt;sup&gt;28&lt;/sup&gt;. Assuming addresses were randomly distributed (and I have no idea if they will be, or anything about this protocol beyond what I’ve read on Wikipedia, to be honest), the sheer amount of territory hackers would have to cover might give me the effective anonymity I thought I already had.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I did get a few tweets that linked to this &lt;a href=&quot;https://xkcd.com/350/&quot;&gt;xkcd comic&lt;/a&gt;, the thought being that my experiment is nothing new: Security folks have been setting out unsecured honeypots for years.&lt;/p&gt;

&lt;p&gt;That said, I think this story illustrates a few things that most people didn’t know:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The Internet isn’t that big (not yet), and it’s packed with hacking scripts.&lt;/strong&gt; Bots scan the IPv4 space frequently enough that nearly every computer that’s not behind a firewall can count on being recorded in less than a day.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Mirai bot is still out in force.&lt;/strong&gt; Many of the hack attempts used the same sequence of password (and shell commands) outlined in the Mirai botnet’s code. It appears other folks have spun up multiple copies of the bot and are busy recruiting unsuspecting servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My toaster experiment isn’t a situation most consumers will face. But it’s an accurate analog to the plight of the kinds of unsecured devices harnessed by the Mirai botnet, and shows how quickly they can be pulled into a hacker’s thrall.&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">Earlier this month, hackers used a massive botnet to spam Dyn, a domain name service provider, and block access to dozens of popular websites. It turns out the worm that recruited the botnet targeted IP-connected devices, including an old brand of webcam popular in warehouses and industrial settings.</summary></entry><entry><title type="html">Make Every Week, Part 4: Ordering a Sweetgreen salad at the press of a button</title><link href="http://localhost:4000/2016/08/19/make-every-week-sweetgreen-salad-button.html" rel="alternate" type="text/html" title="Make Every Week, Part 4: Ordering a Sweetgreen salad at the press of a button" /><published>2016-08-19T00:00:00-04:00</published><updated>2016-08-19T00:00:00-04:00</updated><id>http://localhost:4000/2016/08/19/make-every-week-sweetgreen-salad-button</id><content type="html" xml:base="http://localhost:4000/2016/08/19/make-every-week-sweetgreen-salad-button.html">&lt;p&gt;Eesh! So far, #MakeEveryWeek has been more like #MakeEveryThreeWeeks. My apologies. Sometimes the making is a lot easier than the blogging.&lt;/p&gt;

&lt;p&gt;This week’s projects focuses on a (sort of) healthy addiction of mine: salads from &lt;a href=&quot;http://www.sweetgreen.com/&quot;&gt;Sweetgreen&lt;/a&gt;, a restaurant chain from D.C. that serves up a mean quinoa-and-kale. Though technically fast food, Sweetgreen doesn’t feel or taste like your regular rushed-lunch fare. It’s my go-to place to pick up lunch if I didn’t bring left overs from home, and it doesn’t hurt that their Foggy Bottom location is a nice walk from &lt;em&gt;The Atlantic&lt;/em&gt;’s offices.&lt;/p&gt;

&lt;p&gt;But a lot of people feel the same way. The line around noon can get verrrrry long.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;
  &lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Unknowingly showed up to sweetgreen in the middle of lunch hour. Now I'm stuck in this long ass line.— Sextina Aquafina (@yosoymichael) &lt;a href=&quot;https://twitter.com/yosoymichael/status/765229537756061696&quot;&gt;August 15, 2016&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;
  &lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;There was barely anyone in line today at &lt;a href=&quot;https://twitter.com/sweetgreen&quot;&gt;@sweetgreen&lt;/a&gt;. &lt;a href=&quot;https://twitter.com/hashtag/SignOfTheApocalypse?src=hash&quot;&gt;#SignOfTheApocalypse&lt;/a&gt;— Heather Benjamin (@Heather_Benj) &lt;a href=&quot;https://twitter.com/Heather_Benj/status/764160904825036800&quot;&gt;August 12, 2016&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;One remedy to this is Sweetgreen’s online ordering system, which signals the kitchen to make a salad at a certain time and leave it on a shelf for pick-up. That way, you can pop in, grab and leave, instead of waiting for the salad to be made in front of you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/salad1.jpg&quot; alt=&quot;Delicious, pick-up-able salad.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Last week, I got my second Amazon IoT button—they’re finally back in stock. Then the thought struck me. &lt;strong&gt;Is there a way to hook into Sweetgreen’s ordering system and buy a salad with a simple button press?&lt;/strong&gt; Could my dream of seamless, on-demand salad delivery come true? Granted, if I had such a device, I’d probably spend entirely too much on salads. But it was too neat of an idea to pass up.&lt;/p&gt;

&lt;p&gt;Since Sweetgreen doesn’t publish a documented ordering API (and who does?), I had to dive deep into the network traffic of the average salad order.&lt;/p&gt;

&lt;h2 id=&quot;figuring-out-how-sweetgreen-works&quot;&gt;Figuring out how Sweetgreen works&lt;/h2&gt;

&lt;p&gt;To complete a Sweetgreen transaction, I need to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;log in using my email and password, saving the resulting cookie;&lt;/li&gt;
  &lt;li&gt;add a salad to my shopping bag;&lt;/li&gt;
  &lt;li&gt;complete the order with my credit card information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fortunately, Sweetgreen has a relatively simple (though undocumented) API, accessible through &lt;a href=&quot;https://order.sweetgreen.com/api/&quot;&gt;https://order.sweetgreen.com/api/&lt;/a&gt;. After poking around the website (and adding/removing quite a few salads from my shopping bag), it looks like this is the workflow I’ll have to follow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Send a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; request to &lt;code class=&quot;highlighter-rouge&quot;&gt;https://order.sweetgreen.com/api/customers/login_or_register&lt;/code&gt; with my username and password;&lt;/li&gt;
  &lt;li&gt;Add the salad to my bag with a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; request to &lt;code class=&quot;highlighter-rouge&quot;&gt;https://order.sweetgreen.com/api/line_items&lt;/code&gt;, along with a JSON object describing the order;&lt;/li&gt;
  &lt;li&gt;Get the “order” JSON by sending a &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; request to &lt;code class=&quot;highlighter-rouge&quot;&gt;https://order.sweetgreen.com/api/session&lt;/code&gt;, saving the &lt;code class=&quot;highlighter-rouge&quot;&gt;order&lt;/code&gt; object and my billing information;&lt;/li&gt;
  &lt;li&gt;Send a &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; request to &lt;code class=&quot;highlighter-rouge&quot;&gt;https://order.sweetgreen.com/api/orders/[order id]&lt;/code&gt;, packaging my combined order+billing object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m writing this code in Node.js using the &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; module, so I’m going to start off my script by including the library and setting up the jar where I’ll store the session cookie (so my authentication will stick once I log in.)&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'request'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cookies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next up, I’ll log in with my Sweetgreen credentials.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Log in&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://order.sweetgreen.com/api/customers/login_or_register&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INSERT_SWEETGREEN_EMAIL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INSERT_SWEETGREEN_PASSWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Rest of code goes here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That call returns a massive JSON object, holding previous orders, current shopping status, and billing account info. Since the final package I send to Sweetgreen to complete the order needs some of this account info, I’m going to grab it now.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contact_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;customers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contact_number&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;billing_account_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;customers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;billing_account_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;billing_account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;billing_accounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We’re now set to add salads to my shopping bag.&lt;/p&gt;

&lt;h2 id=&quot;adding-items-and-completing-the-order&quot;&gt;Adding items and completing the order&lt;/h2&gt;

&lt;p&gt;Each salad object is actually pretty simple. At its most basic, it just needs a &lt;code class=&quot;highlighter-rouge&quot;&gt;quantity&lt;/code&gt;, a &lt;code class=&quot;highlighter-rouge&quot;&gt;product_id&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;restaurant_id&lt;/code&gt;. The Foggy Bottom ID is &lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt;, so I’ll use that for every order. Here’s the object for a Harvest Bowl:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;harvest_bowl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;line_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;139&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restaurant_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;6&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But! Things get more complicated if you want to modify a base recipe. For example, I love the Guacamole Greens salad—but only if I can replace the red onion with corn. In the API, you need to drop these changes as a series of &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; objects. Here’s an object for my modded recipe, pulled with some slight modifications from the network traffic.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;guac_greens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;line_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;custom_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;andrew's special guac with no onions success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;product_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;134&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;13929&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;remove red onion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;out_of_stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;parent_option_group_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;973&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;option_group_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;975&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ingredient_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;13941&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sub raw corn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;out_of_stock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;parent_option_group_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;975&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;option_group_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[],&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ingredient_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;61&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;line_item_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restaurant_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;6&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Constructing that object is the hard part, but adding it to the shopping bag is pretty easy. Here comes another POST request:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://order.sweetgreen.com/api/line_items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;guac_greens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;order_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;line_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ignored_order_id&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice how I saved the order ID? That’s because I’ll need it very shortly to complete the transaction. But first, I’ve got to construct the final order object. Turns out that’s basically a copy of the object you get by calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;/session&lt;/code&gt; endpoint, along with some additional billing info and other ordering ephemera. After some trial and error, I figured out it was easiest to make a call to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/session&lt;/code&gt; endpoint, grab the array of &lt;code class=&quot;highlighter-rouge&quot;&gt;orders&lt;/code&gt;, filter it down to the latest order and tack on the required miscellaneous info.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Get final order &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://order.sweetgreen.com/api/session&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// Grab latest order object&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orders&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;order_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// Append billing stuff and give &lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contact_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contact_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;billing_account_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;billing_account_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wanted_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;available_wanted_times_tuples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;original&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;complete&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;billing_account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;billing_account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After that, all you need is a &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; request referencing the &lt;code class=&quot;highlighter-rouge&quot;&gt;order_id&lt;/code&gt; and you’re good to go:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://order.sweetgreen.com/api/orders/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;did it!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sweetgreen helpfully sends an email after you post an order, so you’ll know when your order goes through.&lt;/p&gt;

&lt;h2 id=&quot;boom-salad-en-route&quot;&gt;Boom! Salad en route&lt;/h2&gt;

&lt;p&gt;I had to make some slight modifications to the code to get it ready for AWS Lambda, the service powering the IoT button, but it was otherwise pretty much ready to go. I also wrote a quick function that randomly chooses one of three salads to order, so I have a bit of variety. The full code is &lt;a href=&quot;https://github.com/arm5077/sweetgreen-button&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the button posted above my desk at work:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/salad2.jpg&quot; alt=&quot;Button posted on my desk&quot; /&gt;&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">Eesh! So far, #MakeEveryWeek has been more like #MakeEveryThreeWeeks. My apologies. Sometimes the making is a lot easier than the blogging.</summary></entry></feed>
