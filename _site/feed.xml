<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-08-04T20:13:52-04:00</updated><id>http://localhost:4000//</id><title type="html">Andrew McGill, friendly neighborhood journalist</title><subtitle>I'm a journalist and web developer from Philadelphia who hopes to die happy.</subtitle><author><name>andrewmcgill</name></author><entry><title type="html">Fine, I tried to make a news app as fun as TikTok</title><link href="http://localhost:4000/2019/07/07/a-tik-tok-news-app.html" rel="alternate" type="text/html" title="Fine, I tried to make a news app as fun as TikTok" /><published>2019-07-07T00:00:00-04:00</published><updated>2019-07-07T00:00:00-04:00</updated><id>http://localhost:4000/2019/07/07/a-tik-tok-news-app</id><content type="html" xml:base="http://localhost:4000/2019/07/07/a-tik-tok-news-app.html">&lt;p&gt;So I’ve taken a stab at the TikTok-style news app posited in &lt;a href=&quot;http://www.andrewmcgill.me/2019/06/15/why-dont-we-have-news-apps-like-tik-tok.html&quot;&gt;this previous post.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My premise: Most news apps look the same and emphasize browsing when you’re stting with a cup of coffee in the morning. How would I design a news app for in-between moments — standing in line, waiting for the elevator — when I didn’t have a specific thing I was looking for, beyond something interesting to read?&lt;/p&gt;

&lt;p&gt;Here’s what I came up with — you can take a look at &lt;a href=&quot;https://atlantic-tik-tok.herokuapp.com&quot;&gt;https://atlantic-tik-tok.herokuapp.com:&lt;/a&gt;&lt;/p&gt;

&lt;video src=&quot;/assets/atlantic-tiktok-images/swipe-demo.mp4&quot; autoplay=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; loop=&quot;&quot;&gt;&lt;/video&gt;

&lt;p&gt;It’s a progressive web app modeled loosely after TikTok, where every swipe up gives you something new. If you’re interested in a story, you can tap it to read it in full.&lt;/p&gt;

&lt;p&gt;The app starts by pulling the latest news from The Atlantic. But once you finish swiping through those, it prompts you to “Enter the Wormhole,” pulling the best stories from out archive.&lt;/p&gt;

&lt;p&gt;A few notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The app saves the stories it’s already shown, so you never see the same story twice.&lt;/li&gt;
  &lt;li&gt;Right now, archive stories are sourced exclusively from The Atlantic’s Science, Health and Family sections. I’m figuring that once people are caught up with the latest news, they don’t want to see old politics stories. So I’m focusing solely on wonder-and-delight stuff.&lt;/li&gt;
  &lt;li&gt;The little Poseidon illustrations are from the wonderful &lt;a href=&quot;https://www.behance.net/andikkawah0f09/&quot;&gt;Andika Wahyu.&lt;/a&gt; He’s available for commissions!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since this is a web app, not a native iOS app, you have to manually “install” it by opening the URL in Safari or Chrome and clicking “Add to Home Screen.” You can also just visit it as a website, but I prefer the fullscreen version.&lt;/p&gt;

&lt;p&gt;I’m going to sit with it for a bit and see if it fills a hole in my news habits. But there’s definitely already a few things I want to improve.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;It desperately needs a “Save for later” feature.&lt;/strong&gt; Sometimes the app gives me a story that looks interesting, but really is just too long for me to read right away. I’d love to be able to bookmark it to read later.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;I’m not sure the background-screened image works.&lt;/strong&gt; I wanted to feature the article art in way that felt dramatic but not distracting, but I’m not sure I’ve hit it here. The cropping often looks funny, and I have to choose a better set of screen gradients. Maybe there’s a smarter way to include the photo in its original aspect ratio, or to target the right spot to center the crop.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Offline reading isn’t a thing yet.&lt;/strong&gt; While the app caches the stories locally after pulling them from The Atlantic, I need to refactor the app so it knows to pull from local storage when it doesn’t sense an internet connection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plenty of room to improve, but it’s a start. &lt;a href=&quot;https://atlantic-tik-tok.herokuapp.com/&quot;&gt;Give it a shot yourself&lt;/a&gt; and &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#097;&amp;#114;&amp;#109;&amp;#053;&amp;#048;&amp;#055;&amp;#055;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;let me know what you think.&lt;/a&gt; (And here’s the &lt;a href=&quot;https://github.com/arm5077/atlantic-tik-tok&quot;&gt;Github repository&lt;/a&gt; for the code.)&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">So I’ve taken a stab at the TikTok-style news app posited in this previous post.</summary></entry><entry><title type="html">Why don’t we have news apps as fun as TikTok?</title><link href="http://localhost:4000/2019/06/15/why-dont-we-have-news-apps-like-tik-tok.html" rel="alternate" type="text/html" title="Why don’t we have news apps as fun as TikTok?" /><published>2019-06-15T00:00:00-04:00</published><updated>2019-06-15T00:00:00-04:00</updated><id>http://localhost:4000/2019/06/15/why-dont-we-have-news-apps-like-tik-tok</id><content type="html" xml:base="http://localhost:4000/2019/06/15/why-dont-we-have-news-apps-like-tik-tok.html">&lt;p&gt;I’m newly obsessed by TikTok, the social video platform that combines the best parts of Vine and a casino slot machine. Its interface is easy. IT shows me just one thing at a time. And the algorithm powering it is uncannily good at learning my tastes and serving up what I like.&lt;/p&gt;

&lt;iframe height=&quot;700&quot; src=&quot;https://www.tiktok.com/embed/6646016679396510981&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; style=&quot;margin: auto; display: block; width: 100%; max-width: 350px&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Why aren’t more news apps like this? I recognize there’s a big difference between quality journalism and funny videos, but I don’t see a single major news app emulating the awesome, serendipitous user interfaces we’re seeing from social media companies.&lt;/p&gt;

&lt;p&gt;I think three things apply:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;News apps (and homepages) are generally organized around breadth.&lt;/strong&gt; They want to show you all the stuff that’s going on, instead of directing your attention to a single thing, or series of things.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;New organizations prize curation and editing, and are reluctant to surrender that judgement to algorithms.&lt;/strong&gt; (Vox and Flipboard use computer logic to determine the best homepage layout, but not the stories being displayed.)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;News apps don’t want to look frivolous.&lt;/strong&gt; A lot of the newest ways to navigate apps – swiping, tapping – have been pioneered by companies news orgs would rather not be associated with. No editor-in-chief wants to hear, “Oh, your app is just like Tinder!”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m not arguing that these positions are &lt;em&gt;wrong&lt;/em&gt; – though I look askance at being conservative for conservativeness’s sake. But I do wonder if a more serendipitous, easier-to-navigate news app would appeal to people in interstitial moments, those times when you’re waiting in line or taking a Lyft and just want something to occupy your attention.&lt;/p&gt;

&lt;p&gt;A few apps (&lt;a href=&quot;https://apps.apple.com/us/app/economist-espresso/id896628003&quot;&gt;Economist Espresso,&lt;/a&gt; &lt;a href=&quot;https://apps.apple.com/us/app/refinery29-this-am-top-8-news-headlines-updates/id988472315&quot;&gt;Refinery29 This AM,&lt;/a&gt; the now-defunct &lt;a href=&quot;https://digiday.com/media/quartz-is-shutting-down-its-quartz-brief-mobile-app-july-1/&quot;&gt;Quartz Briefing&lt;/a&gt;) have tried to hit this target. But right now, my go-to is TikTok or Instagram. Is there room for something more intellectually fulfilling?&lt;/p&gt;

&lt;h2 id=&quot;a-proposal&quot;&gt;A proposal&lt;/h2&gt;
&lt;p&gt;I’d argue a place like The Atlantic actually has a good mix of content for a TikTok-type app. Instead of simply relaying the news, most of its stories consider a question or pose an argument. And a lot of its stuff falls nicely into the “wonder-and-delight” category that could grab people immediately.&lt;/p&gt;

&lt;p&gt;Here’s how it would work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;First, get good content.&lt;/strong&gt; Pull The Atlantic’s 500 best-performing stories, and strip out political news. That way, we get stories we know people have enjoyed, but are also less likely to be flash-in-the-pan spot coverage.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Guarantee a surprise.&lt;/strong&gt; Every time the reader opens the app, it shows them a new single-screen promo to an interesting story. It can be simple – maybe just the headline, a deck, and the amount of time it would take to read the full story.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Give them a choice.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;If the reader is interested in a story, they tap it. A screen pops up with the full story text, which they can scroll through or dismiss.&lt;/li&gt;
      &lt;li&gt;If they’re not interested, they swipe up. Boom! They get a new story.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Keep doing this forever.&lt;/strong&gt; Once the reader swipes through the first set of stories, we pull another 500.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/atlantic-tiktok-images/wireframe.png&quot; alt=&quot;Here's a wireframe of the proposal.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’d need to record which stories they’ve read or swipe through, so we avoid showing them again. And it might be nice to have a “save-for-later” function – if they’re interested but don’t have enough time in the elevator, they can bookmark a story.&lt;/p&gt;

&lt;p&gt;Now, I’m not saying this replaces an organization’s news app. It’s still important to have the editors’ voice saying, “These are the stories you &lt;em&gt;should&lt;/em&gt; read!” But as a complimentary app, or even a tab within a larger site, I think this could be pretty fun.&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">I’m newly obsessed by TikTok, the social video platform that combines the best parts of Vine and a casino slot machine. Its interface is easy. IT shows me just one thing at a time. And the algorithm powering it is uncannily good at learning my tastes and serving up what I like.</summary></entry><entry><title type="html">Building a web app to rank my favorite Marvel superhero movies, part II</title><link href="http://localhost:4000/2019/05/14/mcu-ninja-ranking-part-two.html" rel="alternate" type="text/html" title="Building a web app to rank my favorite Marvel superhero movies, part II" /><published>2019-05-14T00:00:00-04:00</published><updated>2019-05-14T00:00:00-04:00</updated><id>http://localhost:4000/2019/05/14/mcu-ninja-ranking-part-two</id><content type="html" xml:base="http://localhost:4000/2019/05/14/mcu-ninja-ranking-part-two.html">&lt;p&gt;&lt;em&gt;Catch up: &lt;a href=&quot;http://www.andrewmcgill.me/2019/05/07/mcu-ninja-ranking-part-one.html&quot;&gt;In this post&lt;/a&gt;, I describe how my Marvel fandom compelled me to make an app that allows me to objectively rank my favorite superhero movies. I’ve settled on using the Quicksort algorithm, and have built a command-line proof-of-concept. Now, I just need to build the real thing.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In order for &lt;a href=&quot;http://mcu.ninja&quot;&gt;mcu.ninja&lt;/a&gt; to work, the app had to do a few things at once:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;It needed to present dozens of pairs of movies to the user in sequence.&lt;/strong&gt; Quicksort relies on comparing a &lt;em&gt;test item&lt;/em&gt; to a &lt;em&gt;pivot.&lt;/em&gt; As the algorithm rolled through the Marvel Cinematic Universe, it would show a bunch of 1-1 matchups, like &lt;em&gt;Captain Marvel&lt;/em&gt; vs. &lt;em&gt;The Incredible Hulk.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Picking one movie over the other had to be super simple.&lt;/strong&gt; People needed to quickly vote, and they’re not going to do it if it’s hard.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;What’s more, it has to be super simple even after you do it dozens of times.&lt;/strong&gt; When you’re trying to order a list of 20+ movies, you’re going to run through a &lt;em&gt;lot&lt;/em&gt; of comparisons.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;It has to make the choice easy to understand.&lt;/strong&gt; A lot of superhero movie titles sound the same, and there are many, many sequels. This app had to make &lt;em&gt;Iron Man 3&lt;/em&gt; and &lt;em&gt;Guardians of the Galaxy Vol 2&lt;/em&gt; look distinct.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not easy!&lt;/p&gt;

&lt;p&gt;But I drew inspiration from another app on the market that’s really good at presenting a bunch of choices quickly: &lt;strong&gt;Tinder.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-swipe-y-solution&quot;&gt;The swipe-y solution&lt;/h2&gt;
&lt;p&gt;In a way, Tinder has a similar goal. You’re shown someone’s profile and asked to make a decision — are you interested in them or not? And since they’re essentially turning dating into a volume play, they want you to be able to rip through a bunch of options &lt;em&gt;fast.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To make this happen, Tinder refined swiping. If you like someone, you swipe right. If you’re not interested, you swipe left. You can blaze through dozens of profiles in a few minutes.&lt;/p&gt;

&lt;p&gt;Turns out this mechanic works pretty well for my app, too. First, I show them the pivot movie. I then run a series of other movies past them. Just like Tinder, if they like the test movie better, they swipe right. Otherwise, they swipe left.&lt;/p&gt;

&lt;p&gt;Once the pivot movie has run out of comparisons, we choose another pivot, and the swiping continues.&lt;/p&gt;

&lt;p&gt;Granted, Tinder isn’t asking user to compare &lt;em&gt;two&lt;/em&gt; people and pick their ideal date — that’s where the comparison to mcu.ninja breaks down. But swiping just made sense. It collapses a long list of comparisons into a single series of a few dozen swipes, resulting in a perfectly sorted list.&lt;/p&gt;

&lt;p&gt;Here’s how it looked in practice:&lt;/p&gt;

&lt;video class=&quot;video&quot; style=&quot;max-width: 400px&quot; src=&quot;/assets/mcu-ninja-2/swipe-demonstration.mp4&quot; muted=&quot;&quot; loop=&quot;&quot; autoplay=&quot;&quot; plays-inline=&quot;&quot;&gt;&lt;/video&gt;

&lt;h2 id=&quot;some-findings-from-user-testing&quot;&gt;Some findings from user testing&lt;/h2&gt;
&lt;p&gt;I learned a few important things from putting the app in front of people.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Swiping is harder than I thought.&lt;/strong&gt; People sometimes forgot which direction to swipe halfway through a series. To cue them, I added labels to the swipe animation making the comparison clear: “The Incredible Hulk is Worse 👎” and “The Incredible Hulk is better 👍”.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;You need an undo button.&lt;/strong&gt; Making a fast-paced app means people will make mistakes. I ended up storing the entire decision chain in memory — the yes-or-no vote on every movie pair. That way, people could jump back if they realized they swiped the wrong way.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Showing people how many questions they have left is hard.&lt;/strong&gt; The tough thing about Quicksort is that it doesn’t guarantee finding a solution within a set number of sets, making a progress bar tricky. I ended up having &lt;em&gt;two&lt;/em&gt; – one at the bottom of the screen, to show how far along you were in the given comparison set, and another at the top, for how close you were to getting your final list. I’m still not sure it works great.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-it-turned-out-and-next-steps&quot;&gt;How it turned out, and next steps&lt;/h2&gt;
&lt;p&gt;I really enjoyed seeing my friends use the app and post their lists.&lt;/p&gt;

&lt;p&gt;But it became clear that it’s still not super easy to share your results, even though the app offers a Twitter and SMS share feature. Most people ended up taking screenshots and sharing those. Long-term, I’d love to have the app produce a card image that you could export and send to other MCU fans, or post on social media.&lt;/p&gt;

&lt;p&gt;Also, this is just a demo website/web app. While I don’t think there’s a &lt;em&gt;huge&lt;/em&gt; demand for ranking favorite superheo movies, it might be interesting to convert it to an iOS app at some point.&lt;/p&gt;

&lt;p&gt;But most importantly, I’m interested to see how this list sorting mechanic could be put to other uses. Why stop at MCU movies? I could see a version of this becoming a new quiz format.&lt;/p&gt;

&lt;p&gt;Regardless, it was a lot of fun to make. If you’re reading this post first, here’s my personal list (&lt;em&gt;7/2019: I’ve updated this list to include&lt;/em&gt; Spider-Man: Far From Home.)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Avengers&lt;/li&gt;
  &lt;li&gt;Iron Man&lt;/li&gt;
  &lt;li&gt;Guardians of the Galaxy&lt;/li&gt;
  &lt;li&gt;Thor: Ragnarok&lt;/li&gt;
  &lt;li&gt;Avengers: Infinity War&lt;/li&gt;
  &lt;li&gt;Captain America: The Winter Soldier&lt;/li&gt;
  &lt;li&gt;Captain America: Civil War&lt;/li&gt;
  &lt;li&gt;Avengers: Endgame&lt;/li&gt;
  &lt;li&gt;Black Panther&lt;/li&gt;
  &lt;li&gt;Spider-Man: Homecoming&lt;/li&gt;
  &lt;li&gt;Spider-Man: Far From Home&lt;/li&gt;
  &lt;li&gt;Iron Man 3&lt;/li&gt;
  &lt;li&gt;Captain America: The First Avenger&lt;/li&gt;
  &lt;li&gt;Captain Marvel&lt;/li&gt;
  &lt;li&gt;Ant-Man&lt;/li&gt;
  &lt;li&gt;Avengers: Age of Ultron&lt;/li&gt;
  &lt;li&gt;Doctor Strange&lt;/li&gt;
  &lt;li&gt;Ant-Man and the Wasp&lt;/li&gt;
  &lt;li&gt;Thor&lt;/li&gt;
  &lt;li&gt;Guardians of the Galaxy Vol. 2&lt;/li&gt;
  &lt;li&gt;Thor 2&lt;/li&gt;
  &lt;li&gt;Iron Man 2&lt;/li&gt;
  &lt;li&gt;The Incredible Hulk&lt;/li&gt;
&lt;/ol&gt;</content><author><name>andrewmcgill</name></author><summary type="html">Catch up: In this post, I describe how my Marvel fandom compelled me to make an app that allows me to objectively rank my favorite superhero movies. I’ve settled on using the Quicksort algorithm, and have built a command-line proof-of-concept. Now, I just need to build the real thing.</summary></entry><entry><title type="html">Building a web app to rank my favorite Marvel superhero movies, part I</title><link href="http://localhost:4000/2019/05/07/mcu-ninja-ranking-part-one.html" rel="alternate" type="text/html" title="Building a web app to rank my favorite Marvel superhero movies, part I" /><published>2019-05-07T00:00:00-04:00</published><updated>2019-05-07T00:00:00-04:00</updated><id>http://localhost:4000/2019/05/07/mcu-ninja-ranking-part-one</id><content type="html" xml:base="http://localhost:4000/2019/05/07/mcu-ninja-ranking-part-one.html">&lt;p&gt;I love superhero movies. Specifically, Marvel superhero movies. Specifically specifically, Marvel Cinematic Universe movies — Iron Man, Captain America, Thor, and so on. Never thought I’d be that guy, but somehow I’ve seen &lt;em&gt;every single MCU movie&lt;/em&gt; — 22 in total.&lt;/p&gt;

&lt;p&gt;Why? Because they’re super good! There’s a reason they have an average Rotten Tomatoes score of 84%.&lt;/p&gt;

&lt;p&gt;But which ones are the &lt;em&gt;best?&lt;/em&gt; This is a constant debate among my friends. And with the latest phase of the MCU coming to a close with &lt;em&gt;Avengers: Endgame&lt;/em&gt;, it’s been a good time to take stock and make best-of lists.&lt;/p&gt;

&lt;p&gt;A few problems, though:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;There are too many movies.&lt;/strong&gt; Organizing 22 films in order of preference is a… &lt;em&gt;tall order.&lt;/em&gt; (🥁) You have to keep track of every other movie when you’re considering one, or chunk them in ways that could lead to misalignment later.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;You’re probably going to give better scores to movies you just saw.&lt;/strong&gt; Because I watched &lt;em&gt;Avengers: Endgame&lt;/em&gt; more recently, I’m more likely to rate it higher than the original Avengers, just because I remember more details about it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;You probably know your favorite and least-favorite films, but nothing in between.&lt;/strong&gt; This is a twist on the well-documented &lt;a href=&quot;https://en.wikipedia.org/wiki/Serial-position_effect&quot;&gt;recency/primacy&lt;/a&gt; effect, where humans are better at remembering the beginnings and ends of lists than things in the middle. In this case, fans probably never formed opinions on middling movies, focusing on just the best and the worst.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these problems mean tools that let you &lt;a href=&quot;http://rankthemcu.com&quot;&gt;drag around movie names&lt;/a&gt; probably aren’t helping you come up with a definitive list. They’re just confusing you!&lt;/p&gt;

&lt;video autoplay=&quot;&quot; playsinline=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot; preload=&quot;auto&quot; poster=&quot;https://thumbs.gfycat.com/SleepyAngelicGiantschnauzer-mobile.jpg&quot; tabindex=&quot;-1&quot;&gt;&lt;source src=&quot;https://thumbs.gfycat.com/SleepyAngelicGiantschnauzer-mobile.mp4&quot; type=&quot;video/mp4&quot; /&gt;&lt;source src=&quot;https://giant.gfycat.com/SleepyAngelicGiantschnauzer.webm&quot; type=&quot;video/webm&quot; /&gt;&lt;source src=&quot;https://giant.gfycat.com/SleepyAngelicGiantschnauzer.mp4&quot; type=&quot;video/mp4&quot; /&gt;&lt;source src=&quot;https://thumbs.gfycat.com/SleepyAngelicGiantschnauzer-mobile.mp4&quot; type=&quot;video/mp4&quot; /&gt;&lt;meta itemprop=&quot;contentUrl&quot; content=&quot;https://giant.gfycat.com/SleepyAngelicGiantschnauzer.mp4&quot; /&gt;&lt;/video&gt;

&lt;p&gt;My take: &lt;strong&gt;It’s easier to pick your favorite movie when you just have two options in front of you.&lt;/strong&gt; If you run through enough pairings, eventually you’ll get an ordered list.&lt;/p&gt;

&lt;p&gt;That’s the idea behind &lt;a href=&quot;http://mcu.ninja/&quot;&gt;mcu.ninja,&lt;/a&gt; a ranking tool I put out last week. 🎉&lt;/p&gt;

&lt;p&gt;In this post, I’m going to explain the logic behind the ordering algorithm powering mcu.ninja and the command-line utility I built to demonstrate it. Next week, I’ll discuss the UI and why I thought Tinder-style swiping was the right decision.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#my-list&quot;&gt;If you just want my MCU movie ranking, here you go.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;sorting-is-hard&quot;&gt;Sorting is hard&lt;/h2&gt;

&lt;p&gt;If you need to order a list of 22 items, it’s simplest to go one by one and compare every movie to every other.&lt;/p&gt;

&lt;p&gt;Let’s say I start with &lt;em&gt;Captain Marvel.&lt;/em&gt; I’d compare it to &lt;em&gt;Iron Man&lt;/em&gt;, the first film in the MCU.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/mcu-ninja-1-images/marvel-vs-iron-man.png&quot; alt=&quot;Captain Marvel vs. Iron Man&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK, that’s easy — I like &lt;em&gt;Iron Man&lt;/em&gt; better. But that’s only the beginning. I still have to compare &lt;em&gt;Captain Marvel&lt;/em&gt; to every other MCU movie — 21 comparisons in all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/mcu-ninja-1-images/marvel-vs-everyone.png&quot; alt=&quot;Captain Marvel vs. every other Marvel movie — quite a few!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we’re done with &lt;em&gt;Captain Marvel&lt;/em&gt;, we move on to the next film: &lt;em&gt;Avengers: Endgame.&lt;/em&gt; Since we already compared it to &lt;em&gt;Captain Marvel&lt;/em&gt;, we don’t have to match them again. But we still have 20 other movies to compare.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/mcu-ninja-1-images/marvel-and-endgame.png&quot; alt=&quot;Let's add in Avengers: Endgame. SO MANY MOVIES&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So far, we’ve made 41 comparisons. If we add just two more movies, we’re up to 78:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/mcu-ninja-1-images/obviously-crazy.png&quot; alt=&quot;This is obviously crazy.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Taking this to its mathematical conclusion, we’d have to make comparisons equal to 21 + 20 + 19 + 18… + 1, or &lt;em&gt;(n^2 + n) / 2&lt;/em&gt;. That’s 231 match-ups — only marginally better than watching &lt;a href=&quot;https://screenrant.com/infinity-war-doctor-strange-futures-how-many-why/&quot;&gt;14,000,605 alternative futures.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;quicksort-to-the-rescue&quot;&gt;Quicksort to the rescue&lt;/h2&gt;

&lt;p&gt;There are plenty of &lt;a href=&quot;https://en.wikipedia.org/wiki/Sorting_algorithm#Comparison_sorts&quot;&gt;better ways&lt;/a&gt; to sort stuff. In this case, topping the list is the &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Quicksort&quot;&gt;Quicksort&lt;/a&gt;&lt;/strong&gt; algorithm.&lt;/p&gt;

&lt;p&gt;Let’s line up all the movies by date released — the order doesn’t matter — and randomly pick &lt;em&gt;Captain Marvel&lt;/em&gt; to start:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/mcu-ninja-1-images/quicksort-step-1.png&quot; alt=&quot;All the Marvel movies lined up, with Captain Marvel highlighted.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Captain Marvel&lt;/em&gt; is the &lt;strong&gt;pivot.&lt;/strong&gt; Our job is to re-order the list so every movie that’s worse goes on the left, and every movie that’s better goes on the right.&lt;/p&gt;

&lt;p&gt;It doesn’t matter what order we put them in — only that they’re better or worse than the pivot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/mcu-ninja-1-images/quicksort-step-2.png&quot; alt=&quot;We've sorted the movies to be better or worse than Captain Marvel.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ater sorting (your choices might be different!), we now know Captain Marvel is No. 16 on list. To do this, we had to make 21 comparisons — same as we did before. But the next step is different. We consider the better-than and worse-than movies as &lt;em&gt;their own sets,&lt;/em&gt; and run the method again.&lt;/p&gt;

&lt;p&gt;So in the “worse-than-Captain Marvel” set, we randomly choose &lt;em&gt;Thor: The Dark World&lt;/em&gt; as our pivot. In the “better-than-Captain Marvel” set, we choose &lt;em&gt;Captain America: Civil War.&lt;/em&gt; For each of these sets, we again sort the movies by whether or not they’re worse than the pivot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/mcu-ninja-1-images/quicksort-step-3.png&quot; alt=&quot;Now we've sorted each subset as well — marking Thor: The Dark World as No. 20 and Captain America: Civil War as No. 8.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we have three movies properly ordered — with only 40 comparisons, instead of 60 with our previous method. That’s a huge improvement.&lt;/p&gt;

&lt;p&gt;That kind of efficiency isn’t guaranteed. Quicksort works best when the pivots land in the middle of a given set — in this case, the movie that’s chosen is average, not terrible or spectacular. But unless you’re really unlucky, Quicksort will work far better than brute force.&lt;/p&gt;

&lt;h2 id=&quot;building-a-proof-of-concept&quot;&gt;Building a proof of concept&lt;/h2&gt;

&lt;p&gt;Before I built out the full &lt;a href=&quot;http://www.mcu.ninja&quot;&gt;mcu.ninja&lt;/a&gt; app, I wanted to make sure this method actually made sense. In practice, would it work to present people with pairs of movies and having Quicksort figure out which to show next?&lt;/p&gt;

&lt;p&gt;So to test, I built &lt;a href=&quot;https://github.com/arm5077/mcu-rankings-cli&quot;&gt;mcu-rankings-cli,&lt;/a&gt; a command line interface script written in Node.&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot;&gt;&lt;source src=&quot;/assets/mcu-ninja-1-images/cli-example.mp4&quot; /&gt;&lt;/video&gt;

&lt;p&gt;Pretty simple — it gives you two options, and you pick one. On the back end, I wrote a &lt;code class=&quot;highlighter-rouge&quot;&gt;MovieList&lt;/code&gt; class that handled making match-ups and accepting votes from the user. On the front end, the &lt;a href=&quot;https://www.npmjs.com/package/inquirer&quot;&gt;inquirer&lt;/a&gt; makes the CLI magic happen.&lt;/p&gt;

&lt;p&gt;The method seemed to work pretty well. Sometimes the pivot movies weren’t great — it’s annoying to get a stinker like &lt;em&gt;The Incredible Hulk&lt;/em&gt; and have to vote against it 20-something times. Later on, I decided to use Rotten Tomatoes data to choose the most “average” movie in a set as the pivot.&lt;/p&gt;

&lt;p&gt;But otherwise, success. Next week, I’ll talk about how the final swipe-y UI came to be!&lt;/p&gt;

&lt;h2 id=&quot;for-the-record-heres-my-list-a-namemy-lista&quot;&gt;For the record, here’s my list: &lt;a name=&quot;my-list&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;The Avengers&lt;/li&gt;
  &lt;li&gt;Iron Man&lt;/li&gt;
  &lt;li&gt;Guardians of the Galaxy&lt;/li&gt;
  &lt;li&gt;Thor: Ragnarok&lt;/li&gt;
  &lt;li&gt;Avengers: Infinity War&lt;/li&gt;
  &lt;li&gt;Captain America: The Winter Soldier&lt;/li&gt;
  &lt;li&gt;Captain America: Civil War&lt;/li&gt;
  &lt;li&gt;Avengers: Endgame&lt;/li&gt;
  &lt;li&gt;Black Panther&lt;/li&gt;
  &lt;li&gt;Spider-Man: Homecoming&lt;/li&gt;
  &lt;li&gt;Iron Man 3&lt;/li&gt;
  &lt;li&gt;Captain America: The First Avenger&lt;/li&gt;
  &lt;li&gt;Captain Marvel&lt;/li&gt;
  &lt;li&gt;Ant-Man&lt;/li&gt;
  &lt;li&gt;Avengers: Age of Ultron&lt;/li&gt;
  &lt;li&gt;Doctor Strange&lt;/li&gt;
  &lt;li&gt;Ant-Man and the Wasp&lt;/li&gt;
  &lt;li&gt;Thor&lt;/li&gt;
  &lt;li&gt;Guardians of the Galaxy Vol. 2&lt;/li&gt;
  &lt;li&gt;Thor 2&lt;/li&gt;
  &lt;li&gt;Iron Man 2&lt;/li&gt;
  &lt;li&gt;The Incredible Hulk&lt;/li&gt;
&lt;/ol&gt;</content><author><name>andrewmcgill</name></author><summary type="html">I love superhero movies. Specifically, Marvel superhero movies. Specifically specifically, Marvel Cinematic Universe movies — Iron Man, Captain America, Thor, and so on. Never thought I’d be that guy, but somehow I’ve seen every single MCU movie — 22 in total.</summary></entry><entry><title type="html">A data interactive that challenges people to draw a trend, and then shows them reality</title><link href="http://localhost:4000/2019/01/13/making-the-guess-graph-module.html" rel="alternate" type="text/html" title="A data interactive that challenges people to draw a trend, and then shows them reality" /><published>2019-01-13T00:00:00-05:00</published><updated>2019-01-13T00:00:00-05:00</updated><id>http://localhost:4000/2019/01/13/making-the-guess-graph-module</id><content type="html" xml:base="http://localhost:4000/2019/01/13/making-the-guess-graph-module.html">&lt;p&gt;In the thick of the 2016 campaign, then-candidate Donald Trump frequently claimed that life in America was becoming &lt;a href=&quot;https://twitter.com/realDonaldTrump/status/752834632907943936&quot;&gt;more dangerous.&lt;/a&gt; He didn’t have to work hard to convince folks. Gallup pollsters found &lt;a href=&quot;http://www.gallup.com/poll/190475/americans-concern-crime-climbs-year-high.aspx&quot;&gt;more than half&lt;/a&gt; of Americans worried “a great deal” about crime and violence, and the same proportion expected gun violence to go up.&lt;/p&gt;

&lt;p&gt;The problem? Those opinions weren’t based on facts. Violence in the United States has declined almost every year for the past 25 years. Trump’s comments were well-timed — the national murder rate did briefly jot up in 2015 and 2016, largely driven by violence in a few cities — but the overwhelming trend is negative. New York City, which ranks near the &lt;a href=&quot;https://today.yougov.com/topics/lifestyle/articles-reports/2014/09/15/what-is-americas-most-dangerous-city&quot;&gt;bottom&lt;/a&gt; in polls on public perception of crime and violence, is actually one of the &lt;a href=&quot;https://www.brennancenter.org/sites/default/files/publications/2018_09_CrimeAnalysisV6.pdf&quot;&gt;safest places&lt;/a&gt; to live in the country.&lt;/p&gt;

&lt;p&gt;But simply stating facts &lt;a href=&quot;https://www.tandfonline.com/doi/full/10.1080/01296612.2017.1384145&quot;&gt;doesn’t always correct a misconception&lt;/a&gt; — people’s opinions are remarkably sticky. When I sat down to write &lt;a href=&quot;https://www.theatlantic.com/politics/archive/2016/07/is-violence-in-america-going-up-or-down/491384/&quot;&gt;a story&lt;/a&gt; on Trump’s doomsaying, I wondered if there was a sneakier way to show folks the true trends.&lt;/p&gt;

&lt;p&gt;My experiment: What if I had them draw their guess first, and then showed them the actual data?&lt;/p&gt;

&lt;p&gt;Here’s what I added near the top of the story:&lt;/p&gt;

&lt;div style=&quot;max-width: 800px; margin: auto&quot;&gt;
  &lt;guess-graph intro-title=&quot;Click the starting point and drag to draw the changing &amp;lt;strong&amp;gt;murder rate&amp;lt;/strong&amp;gt; between 1985-2014.&quot; data=&quot;https://s3.amazonaws.com/the-atlantic/homicide-rate/data/homicides-small.json&quot; y-axis-label=&quot;Homicides per 100,000 people&quot; x-axis-ticks=&quot;1986,1988,1990,1992,1994,1996,1998,2000,2002,2004,2006,2008,2010,2012,2014&quot; x-axis-ticks-mobile=&quot;1985,1990,1995,2000,2005,2010,2014&quot; x-axis-min=&quot;1985&quot; x-axis-max=&quot;2014&quot; y-axis-min=&quot;0&quot; y-axis-max=&quot;16&quot; result-message=&quot;false&quot; height-mobile=&quot;300&quot; height=&quot;400&quot;&gt;&lt;/guess-graph&gt;
&lt;/div&gt;

&lt;p&gt;It was a cool addition to the article, but I never had a chance to deploy this kind of interactive graphic again. What’s more, I never really got a sense if it was &lt;em&gt;effective&lt;/em&gt; — did this actually help people change their minds?&lt;/p&gt;

&lt;h2 id=&quot;two-years-later&quot;&gt;Two years later&lt;/h2&gt;

&lt;p&gt;The government is shut down. The Democrats refuse to fund a wall. And nearly every day, Trump claims there is a flood of people pouring across the southern border.&lt;/p&gt;

&lt;p&gt;By historical standards, this is not true. In fiscal year 2017, the U.S. Border Patrol apprehended 310,531 people, &lt;a href=&quot;https://www.cbp.gov/sites/default/files/assets/documents/2017-Dec/BP%20Total%20Apps%20FY1925-FY2017.pdf&quot;&gt;the lowest number since 1971.&lt;/a&gt; That’s despite a &lt;a href=&quot;https://www.cbp.gov/sites/default/files/assets/documents/2017-Dec/BP%20Staffing%20FY1992-FY2017.pdf&quot;&gt;historically high number&lt;/a&gt; of Border Patrol agents, though the force strength has slightly dropped from its peak in 2011.&lt;/p&gt;

&lt;p&gt;Could it be time to bring back the line-drawing trick?&lt;/p&gt;

&lt;p&gt;This week, my &lt;a href=&quot;http://www.andrewmcgill.me/2019/01/01/new-year-new-make-every-week-resolutions.html&quot;&gt;&lt;strong&gt;Make Every (Two) Week(s) project&lt;/strong&gt;&lt;/a&gt; is to turn my 2016 graphic into a reusuable web component I could launch with almost any dataset. I call it &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;guess-graph&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the new graphic:&lt;/p&gt;

&lt;div style=&quot;max-width: 800px; margin: auto&quot;&gt;
  &lt;guess-graph intro-title=&quot;Click the starting point and draw your best guess for &amp;lt;strong&amp;gt;total illegal border crossings&amp;lt;/strong&amp;gt; between 1997 and 2017.&quot; data=&quot;/assets/guess-graph/border-arrests.json&quot; y-axis-label=&quot;Illegal border crossings (in millions)&quot; y-axis-min=&quot;0&quot; y-axis-max=&quot;3&quot; height-mobile=&quot;300&quot; height=&quot;500&quot;&gt;&lt;/guess-graph&gt;
&lt;/div&gt;
&lt;script src=&quot;/assets/guess-graph/bundle.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And here’s the code I used to make it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;guess-graph
  intro-title = &quot;Click the starting point and 
    draw your best guess for total &amp;lt;strong&amp;gt;illegal 
    border crossings&amp;lt;/strong&amp;gt; between 1997 and 2017.&quot;
  data = &quot;/assets/guess-graph/border-arrests.json&quot;
  y-axis-label = &quot;Illegal border crossings (in millions)&quot;
  y-axis-min = &quot;0&quot;
  y-axis-max = &quot;3&quot;
  height-mobile = &quot;300&quot;
  height = &quot;400&quot;
&amp;gt;&amp;lt;/guess-graph&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;While defaulting to sensible styles, it has a bunch of parameters that customize how it should look (&lt;a href=&quot;https://github.com/arm5077/guess-graph#customization&quot;&gt;full list here&lt;/a&gt;). For data, tt references an external JSON file, which looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[
  {
    &quot;year&quot;: 1997,
    &quot;rate&quot;: 1.369
  },
  {
    &quot;year&quot;: 1998,
    &quot;rate&quot;: 1.517
  },
  {
    &quot;year&quot;: 1999,
    &quot;rate&quot;: 1.537
  },
  ...
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This component is built using the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements&quot;&gt;Custom Elements V1&lt;/a&gt; spec, which brings some of the modularity seen in frameworks like React or Vue into vanilla HTML and JavaScript. Custom elements are now &lt;a href=&quot;https://caniuse.com/#feat=custom-elementsv1&quot;&gt;supported across all major browsers&lt;/a&gt; except Edge; for them and older browsers, use this &lt;a href=&quot;https://github.com/webcomponents/custom-elements/&quot;&gt;polyfill.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why make it as a custom element? This frees the user from having to use any particular JS framework, and makes dropping the code into a content management system or blogging platform like Wordpress easy for beginners.&lt;/p&gt;

&lt;p&gt;The full code for the component is &lt;a href=&quot;https://github.com/arm5077/guess-graph&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next&lt;/h2&gt;
&lt;p&gt;Now that I’ve built the component, next step is to put it through some user testing to see if it makes sense to readers and contributes to their understanding of counterintuitive trends. See you in two weeks!&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">In the thick of the 2016 campaign, then-candidate Donald Trump frequently claimed that life in America was becoming more dangerous. He didn’t have to work hard to convince folks. Gallup pollsters found more than half of Americans worried “a great deal” about crime and violence, and the same proportion expected gun violence to go up.</summary></entry><entry><title type="html">New Year, new Make Every Week resolution</title><link href="http://localhost:4000/2019/01/01/new-year-new-make-every-week-resolutions.html" rel="alternate" type="text/html" title="New Year, new Make Every Week resolution" /><published>2019-01-01T00:00:00-05:00</published><updated>2019-01-01T00:00:00-05:00</updated><id>http://localhost:4000/2019/01/01/new-year-new-make-every-week-resolutions</id><content type="html" xml:base="http://localhost:4000/2019/01/01/new-year-new-make-every-week-resolutions.html">&lt;p&gt;Three years ago, following the &lt;a href=&quot;http://johnkeefe.net/make-every-week-a-bendy-mangnifier&quot;&gt;advice&lt;/a&gt; of builder-journalist John Keefe, I resolved to make something new every week.&lt;/p&gt;

&lt;p&gt;At the time, I wrote and coded for &lt;em&gt;The Atlantic&lt;/em&gt;’s politics section, and my editor might have argued building every week was &lt;em&gt;already&lt;/em&gt; my job. But these projects were supposed to be different — off-the-cuff engineering hacks, with learning something new as the primary objective.&lt;/p&gt;

&lt;p&gt;What I quickly figured out: &lt;strong&gt;making something every week is hard.&lt;/strong&gt; In the end, I made only five things, and sometimes they took a lot more than a week:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://127.0.0.1:4000/2016/06/26/a-summer-of-make-every-week.html&quot;&gt;A Capital Bikeshare Pebble smartwatch app (RIP Pebble);&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.andrewmcgill.me/2016/07/05/make-every-week-2-slack-doorbell.html&quot;&gt;A Slack-powered doorbell;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.andrewmcgill.me/2016/07/18/make-every-week-dmv-tracker.html&quot;&gt;A computer vision script that monitored the lines at the DC DMV;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.andrewmcgill.me/2016/08/19/make-every-week-sweetgreen-salad-button.html&quot;&gt;A button that ordered Sweetgreen salads for me;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.andrewmcgill.me/2016/11/22/real-life-harry-potter-lumos-spell-snowboy.html&quot;&gt;A light that turned on when I said the magic word.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it was fun!&lt;/p&gt;

&lt;p&gt;So it’s back. For 2019, I’m resolving to &lt;strong&gt;Make Every (Two) Week(s),&lt;/strong&gt; launching a new project or improving an old one twice a month. These won’t always be perfectly polished — sometimes they’ll just be a non-functioning prototype. But I miss having the pressure of a publication deadline to keep me honest and busy.&lt;/p&gt;

&lt;p&gt;This time, things will be different. Each month, I’ll have two mandatory go-live dates — on the second and fourth Sundays of each month, I have to publish &lt;em&gt;something.&lt;/em&gt; Revisiting a project over multiple weeks is fine, but I should pursue something substantive, like a round of user-testing or a major enhancement.&lt;/p&gt;

&lt;p&gt;I’ve already picked out my first project, which will be turning the one-off “draw the line” interactive I built for &lt;a href=&quot;https://www.theatlantic.com/politics/archive/2016/07/is-violence-in-america-going-up-or-down/491384/&quot;&gt;this story&lt;/a&gt; on declining homicide rates into a &lt;a href=&quot;https://developers.google.com/web/fundamentals/web-components/customelements&quot;&gt;reuseable web component.&lt;/a&gt; Here’s a shortlist of what other stuff I might dive into:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An algorithmically generated magazine;&lt;/li&gt;
  &lt;li&gt;A website to help you quickly rank your favorite &lt;a href=&quot;https://en.wikipedia.org/wiki/Marvel_Cinematic_Universe&quot;&gt;Marvel Cinematic Universe&lt;/a&gt; movies;&lt;/li&gt;
  &lt;li&gt;An app to help teams see where their members fall on the &lt;a href=&quot;http://www.slate.com/articles/life/low_concept/2012/06/what_kind_of_muppet_are_you_chaos_or_order_.html&quot;&gt;“chaos-order muppet scale”&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;An app to help worker bees quickly surface ideas to top leadership;&lt;/li&gt;
  &lt;li&gt;???&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;arm5077@gmail.com&quot;&gt;Hit me up&lt;/a&gt; if you’ve got a great idea. Otherwise, let the making begin!&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">Three years ago, following the advice of builder-journalist John Keefe, I resolved to make something new every week.</summary></entry><entry><title type="html">Excited by the latest news platform? Build three — yes, three — prototypes to test it first</title><link href="http://localhost:4000/2018/03/29/excited-by-latest-news-platform-build-three-prototypes-first.html" rel="alternate" type="text/html" title="Excited by the latest news platform? Build three — yes, three — prototypes to test it first" /><published>2018-03-29T00:00:00-04:00</published><updated>2018-03-29T00:00:00-04:00</updated><id>http://localhost:4000/2018/03/29/excited-by-latest-news-platform-build-three-prototypes-first</id><content type="html" xml:base="http://localhost:4000/2018/03/29/excited-by-latest-news-platform-build-three-prototypes-first.html">&lt;p&gt;&lt;em&gt;Reposting something I wrote for &lt;a href=&quot;building.theatlantic.com&quot;&gt;The Atlantic’s product blog.&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have so many toys. If you’re a developer, I’m guessing there’s a new framework you’re itching to try tomorrow. And if you’re a news developer, or involved in news product development, there’s even more to tempt you—AMP Stories, ARKit, chatbots, podcasts, IoT, that 3D graphics library you never manage to find time to crack open…&lt;/p&gt;

&lt;p&gt;All of this stuff is awesome and you should use it to make great journalism. And yet… haven’t we all been in this position?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Product manager:&lt;/strong&gt; Guys, Facebook just released a new feature where you can post a picture of yourself smiling, and it’ll make a hot-dog dance next to your face. What could we do with this?&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Excited developer:&lt;/strong&gt; Oh man, so many things! (skims documentation) And it’s so simple! We need to get on this platform immediately!&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Product manager, now also excited:&lt;/strong&gt; OK! Let’s build something! How many sprints will it take?&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Boss:&lt;/strong&gt; Uh, hold on a second…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am intimately familiar with the rush of adrenaline that comes from hearing about a new platform or technology and &lt;em&gt;needing to build something with it, immediately.&lt;/em&gt; But what if the platform is more annoying to work with than you expected? Or it isn’t a good fit for your users? Or — and this is always the heartbreaking one—what if you just don’t have a good enough idea of how to use it?&lt;/p&gt;

&lt;p&gt;Our team at The Atlantic is mighty and growing mightier, but we’re still small enough that we have to choose our shots carefully. So here’s a proposal: Before you go whole-hog into launching a creative initiative with new tech, build &lt;strong&gt;three completely different prototypes first.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;prototype-prototype-prototype&quot;&gt;Prototype, prototype, prototype&lt;/h2&gt;
&lt;p&gt;By “prototype,” I mean a thing that is proudly held together with duct tape. It is the minimum of your minimum viable product. It is hopelessly bespoke.&lt;/p&gt;

&lt;p&gt;It is also a crucial first step. Without getting your hands dirty, I find it’s very hard to get a sense of how a technology could fit into your systems and editorial workflow. Also, your audience (or a small slice of them) can play with a prototype. Who knows if they even want the latest journalism-hot-dog mashup?&lt;/p&gt;

&lt;p&gt;Here’s the bottom line. If you’re going to spend a bunch of time reading documentation to make a level-of-effort recommendation to your boss anyway, why not make something while you’re at it?&lt;/p&gt;

&lt;p&gt;Well, not something. Three things. You have to make three things. What’s so special about the number three?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;It’s not one.&lt;/strong&gt; Your first idea for this platform might be complete magic. But never test just your first idea. You’re too enthusiastic about it to be objective.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;It’s not two.&lt;/strong&gt; Two ideas means you have a winner and a loser. Don’t give your brain (or your bosses) an excuse to ditch the insights from a “losing prototype” because you built a duopoly. You need to learn from both.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;It gives you permission to move fast and be imperfect.&lt;/strong&gt; When you’re just building one thing, you’ll want to make it perfect. Building two things is definitely a grind, so you’ll end up putting 75 percent of your effort into the idea you like better. But when you have to build three prototypes, all those excuses go out the window. You don’t have time to focus on your favorite, and no one’s expecting you to come up with something production-ready.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So those are the rules. Get excited. Build three things. Put them in front of people. Then figure out the next step.&lt;/p&gt;

&lt;h2 id=&quot;how-we-did-this-with-the-amazon-echo&quot;&gt;How we did this with the Amazon Echo&lt;/h2&gt;
&lt;p&gt;The Atlantic is no stranger to audio — we have two podcasts we love and a slew of audio articles. But we haven’t built anything for smart speakers like the Amazon Echo or Google Home.&lt;/p&gt;

&lt;p&gt;We knew we &lt;em&gt;wanted&lt;/em&gt; to. But the prospect of having to learn an unfamiliar SDK and the difficulty of coming up with a worthwhile idea that could also attract sponsors meant smart speakers always got pushed to the back of the line.&lt;/p&gt;

&lt;p&gt;In February, we resolved to break the stalemate with a prototyping blitz. Oh, and do it within a month.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;On Day 1, we pulled newsroom editors, product leaders and sales reps into a conference room. Their topic of debate: How could smart speakers improve The Atlantic’s journalism, and also present an attractive opportunity to underwriters? Together, this larger group hashed out a few broad areas of interest — quizzes, archive material, scientific and cultural discoveries, and non-political news content.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We then whittled the group down, keeping only the key stakeholders. They refined the broad areas and came up with a list of “prototype candidates” — around a six or seven ideas. (A requirement — they had to have goofy names.) To help the group see potential costs, I found it helpful to plot how hard they would be to &lt;strong&gt;build&lt;/strong&gt; versus &lt;strong&gt;maintain,&lt;/strong&gt; using a chart like the one below:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/build-maintain-chart.png&quot; alt=&quot;A chart showing a nubmer of prototypes plotted along a chart, with &amp;quot;Build&amp;quot; on the x-axis and &amp;quot;Maintain&amp;quot; on the y-axis.&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Voting time! From that smaller list, the stakeholder group picked three ideas to rapidly prototype and test with readers. They ending up selecting the two flash briefing skills, as well as one custom skill. Remember, you have to build three!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Atlantic Product team got to work. For each of the feed skills, we produced a week’s worth of “episodes,” pulling talent from the newsroom to help us write scripts and line up interviews. The custom skill required a bit more work in Node, but also a fair amount of voice acting — let’s just say we discovered some emerging radio talent from the ranks of Atlantic developers. All in all, building the prototypes took two weeks.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Simultaneously, we recruited beta testers from our readership. We’d give them things to listen to over their smart speakers, and they’d fill out a survey after every episode/interaction. We’re lucky to have dedicated Atlanticans who are willing to play around with what we create.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Launch day! All three products went live to various segments of our beta testers. Before long, we started getting feedback through surveys (and by surveys, I mean Google Forms, because what else do you really need?):&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/prototype-net-promoter-score.png&quot; alt=&quot;A bar chart showing how people responded to the classic &amp;quot;How likely are you to recommend this&amp;quot; question.&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This real-time feedback was super helpful, and allowed us to switch things around in the second week of beta testing. By the end of the week, we had hundreds of responses — tons of quantitative and qualitative data to pore through.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s over! We convened a wrap-up meeting to discuss what we learned and what products we wanted to build next.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That was our prototyping blitz. At the end of it, we had a) three working products, b) lots of data about customer preferences, and c) tons of enthusiasm for the next steps, both on our team and among our readers/testers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/prototyping-team.jpeg&quot; alt=&quot;A group of smiling people in front of a wall with The Atlantic's logo.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Maybe you don’t have the time for this approach. (I’m betting you do.) And perhaps the technology you’re looking to test is just too complicated to cram into a one-off prototype. (Is it really?) If that’s the case, I guess you just have to wing it.&lt;/p&gt;

&lt;p&gt;But if you’ve got any flexibility in your pipeline, give yourself permission to rough out a new thing (three things!) and learn along the way what you really want to create.&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">Reposting something I wrote for The Atlantic’s product blog..</summary></entry><entry><title type="html">Atlantic hack day project: Giving you great journalism in every browser tab</title><link href="http://localhost:4000/2017/11/15/giving-you-great-journalism-in-every-browser-tab.html" rel="alternate" type="text/html" title="Atlantic hack day project: Giving you great journalism in every browser tab" /><published>2017-11-15T00:00:00-05:00</published><updated>2017-11-15T00:00:00-05:00</updated><id>http://localhost:4000/2017/11/15/giving-you-great-journalism-in-every-browser-tab</id><content type="html" xml:base="http://localhost:4000/2017/11/15/giving-you-great-journalism-in-every-browser-tab.html">&lt;p&gt;&lt;em&gt;Reposting something I wrote for &lt;a href=&quot;building.theatlantic.com&quot;&gt;The Atlantic’s product blog.&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Every so often on The Atlantic’s Product team, we drop what we’re doing and spend a day messing around. Lots of whiteboards, some frantic coding, usually ending with presentations over beers. We call it a “hack day,” but I think of it more as a talent show for ideas — a chance to take all those concepts we’ve been privately mulling, put them on stage, and see how they perform.&lt;/p&gt;

&lt;p&gt;Today, we’re publicly launching one of the reader-focused projects we prototyped at our last hack day: Serendipity, a Chrome and Firefox extension that displays an awesome piece of Atlantic journalism every time you open a new tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serendipity-example.gif&quot; alt=&quot;A picture of Serendpity in action, rotating through stories.*&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-it-does&quot;&gt;What it does&lt;/h2&gt;
&lt;p&gt;Are you on your desktop computer? Hit Cmd-T (or Ctrl-T, if you’re on a PC).&lt;/p&gt;

&lt;p&gt;OK, now come back. Are you back?&lt;/p&gt;

&lt;p&gt;Good. You probably saw an empty screen, or maybe a Google search bar. Chances are, you don’t think about that page. It’s a blank nothingness, waiting for you to type a URL.&lt;/p&gt;

&lt;p&gt;We saw a canvas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/building-the-atlantic/building-a-slack-bot-to-inspire-serendipity-in-the-office-30dc658f8609&quot;&gt;As I’ve written before,&lt;/a&gt; I’m fascinated by the concept of serendipity, the collision of unrelated things that result in something new. True serendipity is rare, but it can be encouraged. I think that’s what we’re trying to do when we publish a magazine: We take a bunch of ideas, bundle them together, and deliver them to you for inspiration.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;https://www.theatlantic.com/serendipity/&quot;&gt;The Atlantic Serendipity,&lt;/a&gt; we’re aiming to do the same thing. With every new tab, it surprises you with a new piece of journalism. Maybe the article catches your eye, and you read more — or maybe it doesn’t, and you finish typing in the website you were going to visit.&lt;/p&gt;

&lt;p&gt;Either way, you get a bit of delightful (we hope!) randomness, and we get a chance to show you a piece of writing or video we think is really good.&lt;/p&gt;

&lt;h2 id=&quot;how-we-built-it&quot;&gt;How we built it&lt;/h2&gt;
&lt;p&gt;When the team (&lt;a href=&quot;https://www.linkedin.com/in/ana-carano-3a5b7090/&quot;&gt;Ana Carano,&lt;/a&gt; &lt;a href=&quot;https://www.linkedin.com/in/thanh-do-03b9b096/&quot;&gt;Thanh Do,&lt;/a&gt; &lt;a href=&quot;http://kevinmahoney.me/&quot;&gt;Kevin Mahoney,&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/carsontrob?lang=en&quot;&gt;Carson Trobich&lt;/a&gt;) huddled up on Hack Day morning, the only thing we knew was that we wanted to put The Atlantic on someone’s Chrome tab. What it looked like, or even how we’d do it — no idea.&lt;/p&gt;

&lt;p&gt;Our first step was to look at the competition. Here are a few extensions we found helpful for inspiration:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://momentumdash.com/&quot;&gt;Momentum&lt;/a&gt;, the grande dame of them all, with more than 11,000 reviews on the Chrome store. It puts a clock, a quote, and a beautiful picture on your browser, and greets you by name. It also has a number of optional widgets.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://beta.wall.cat/&quot;&gt;Wallcat&lt;/a&gt;. Like Momentum, it displays a new piece of stunning photography every day.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/wandertab-by-hitlist/fobdcmnamenjmkffajcbljjpgiolooeh?hl=en&quot;&gt;Wandertab&lt;/a&gt;. This one is fun: It features airfare deals from the location of your choice, updating frequently.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/mainichi/dfekdjmdikicceaiokcmmchenpilglhn?hl=en&quot;&gt;Mainichi&lt;/a&gt;. Kevin and Thanh were fans of this one, which drops in a flashcard of foreign language vocabulary into each new tab.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After some initial brainstorming, Thanh put together some sketches of three approaches, varying in density and tone:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serendipity-thanh-prototype-1.jpeg&quot; alt=&quot;This one looks a bit like Tweetdeck, with cascading columns of Atlantic stories.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serendipity-thanh-prototype-2.jpeg&quot; alt=&quot;This is simpler, and colored in reverse.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By the end of hack day, we had semi-interactive version of the second design ready to show the rest of the Product team. Folks were intrigued. There were a few complaints, however:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It was monochrome, and didn’t feature any of the photography or graphic art that usually accompanies our stories.&lt;/li&gt;
  &lt;li&gt;Even with just three stories, it was a bit dense.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A week or two after the presentation, I went back to the drawing board and mocked up a simpler version, featuring just one headline, and using our new display font, Noe:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serendipity-andrew-prototype-1.png&quot; alt=&quot;A single story, this time, with a blue background.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hm! Much cleaner. For variety, I played around with having the background tint change every time, cycling through some of our new brand colors. (I also attempted a misbegotten adventure with a shifting animated gradient, which nearly sent my computer’s CPU marching to the picket lines.)&lt;/p&gt;

&lt;p&gt;But was there a way to integrate photography? Turns out that a good number of our display photos looked decent behind the headlines, so long as they were toned correctly to avoid conflicting with the text. I also added an Atlantic logo and a “Next story” button, so people could cycle through without having to open new tabs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serendipity-andrew-prototype-2.png&quot; alt=&quot;Added a photo and a next button.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Right now, the story-recommendation algorithm is simple: We’re just using the our homepage’s RSS feed. The first time you open a new tab, Serendipity pulls the latest stories and stashes them in your browser’s local storage; that means it works even when you’re not connected to the internet (though the photos don’t show up.)&lt;/p&gt;

&lt;p&gt;Every time you pop open a tab, it shows you a different story. After 30 minutes or so, it’ll check back with us to see if there’s new content.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next&lt;/h2&gt;

&lt;p&gt;In October, we debuted Serendipity to The Masthead, The Atlantic’s membership program. Based on their feedback and new responses from you, we’ll be updating the extension as time permits. Some of the ideas we’re fielding:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A “back” button,for those times you glimpse an interesting story just before gmail.com or facebook.com loads;&lt;/li&gt;
  &lt;li&gt;A “quiet” mode, where the same story is shown to you on every new tab, refreshed every half-hour;&lt;/li&gt;
  &lt;li&gt;An accessibility theme, losing the image and switching to high-contrast font and background colors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll see — it all depends on what our readers say. And so I hope you’ll &lt;a href=&quot;https://www.theatlantic.com/serendipity&quot;&gt;give Serendipity a try!&lt;/a&gt; And please let me know what you think at andrew@theatlantic.com. Excited to hear from you.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Endnote:&lt;/em&gt; The New Yorker &lt;em&gt;has published their own cool new-tab Chrome extension &lt;a href=&quot;https://chrome.google.com/webstore/detail/the-new-yorker/apbnnoblhichgncodkjnmlbgmdclkmco?hl=en&quot;&gt;here.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">Reposting something I wrote for The Atlantic’s product blog..</summary></entry><entry><title type="html">Using computer vision to figure out the best time to visit the DMV</title><link href="http://localhost:4000/2017/05/22/the-results-of-my-DMV-camera-experiment.html" rel="alternate" type="text/html" title="Using computer vision to figure out the best time to visit the DMV" /><published>2017-05-22T00:00:00-04:00</published><updated>2017-05-22T00:00:00-04:00</updated><id>http://localhost:4000/2017/05/22/the-results-of-my-DMV-camera-experiment</id><content type="html" xml:base="http://localhost:4000/2017/05/22/the-results-of-my-DMV-camera-experiment.html">&lt;p&gt;Last summer — it &lt;em&gt;does not&lt;/em&gt; feel that long ago — &lt;a href=&quot;/2016/07/18/make-every-week-dmv-tracker.html&quot;&gt;I launched a script&lt;/a&gt; to record data from the District of Columbia Department of Motor Vehicles’ &lt;a href=&quot;https://dmv.dc.gov/page/customer-webcams-georgetown-service-center&quot;&gt;live webcam feeds&lt;/a&gt;, which monitor the waiting room of the main service station in Georgetown.&lt;/p&gt;

&lt;p&gt;Every minute, my code “counted” the number of empty seats present, building a database that could tell you, with extremely fine granularity, exactly how busy the DMV was. (Take a look at the link above for an explanation of how that worked.)&lt;/p&gt;

&lt;p&gt;I planned to let it run for a month. But then I forgot about it; the script actually ran for three months (at which point my free Heroku MySQL database ran out of memory). Happy accident!&lt;/p&gt;

&lt;p&gt;Packing all that data into a visualization that lays out the center’s relatively crowdedness over the course of the “average” week actually shows some interesting trends:&lt;/p&gt;

&lt;div id=&quot;chart&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;https://s3-us-west-2.amazonaws.com/nationaljournal/libraries/pym.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
var pymParent = new pym.Parent('chart', 'https://s3.amazonaws.com/the-atlantic/dc-dmv-display/index.html', {});
&lt;/script&gt;

&lt;p&gt;First, the service center is closed on Sunday and Monday, so those days registered no data. Lop ‘em off.&lt;/p&gt;

&lt;p&gt;Second, Saturday is the busiest day. I expected that — most people have to wait for the weekend to get enough free time to slog through renewing their their licenses. The worst time to show up is 12-1 p.m. on Saturday, when crowds are at least 60 percent larger than average.&lt;/p&gt;

&lt;p&gt;But then there’s Thursday, which for some reason is a relative respite at the DMV. The whole morning is far less busy than average, with the 10 a.m. hour being the least crowded of the week. And the rest of the day is on par.&lt;/p&gt;

&lt;p&gt;What is it about &lt;em&gt;Thursday&lt;/em&gt;? I’m going to have to do more investigation here. Maybe the staff closes off part of the service center for cleaning, fooling the camera algorithm into thinking the whole place is less busy?&lt;/p&gt;

&lt;p&gt;Regardless, it’s a fun conclusion to a little experiment I started a year ago. I only wish I had sprung for a paid Heroku instance… we could be working with a whole &lt;em&gt;year&lt;/em&gt; of data if the database hadn’t tapped out!&lt;/p&gt;

&lt;p&gt;But even from this, there’s a clear takeaway: &lt;strong&gt;go to the DMV on Thursday.&lt;/strong&gt;&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">Last summer — it does not feel that long ago — I launched a script to record data from the District of Columbia Department of Motor Vehicles’ live webcam feeds, which monitor the waiting room of the main service station in Georgetown.</summary></entry><entry><title type="html">Can a Slack bot inspire serendipity at work?</title><link href="http://localhost:4000/2017/03/18/finding-serendipity-at-the-atlantic.html" rel="alternate" type="text/html" title="Can a Slack bot inspire serendipity at work?" /><published>2017-03-18T00:00:00-04:00</published><updated>2017-03-18T00:00:00-04:00</updated><id>http://localhost:4000/2017/03/18/finding-serendipity-at-the-atlantic</id><content type="html" xml:base="http://localhost:4000/2017/03/18/finding-serendipity-at-the-atlantic.html">&lt;p&gt;At any given moment, people are doing some pretty neat stuff at &lt;em&gt;The Atlantic.&lt;/em&gt; Just last week, my coworkers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Wrote a story about &lt;a href=&quot;https://www.theatlantic.com/science/archive/2017/03/snake-vs-snake/519696/&quot;&gt;snakes that are good at killing other snakes;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Experimented with how to hype a magazine story &lt;a href=&quot;https://www.instagram.com/p/BReEOpLD8zm/&quot;&gt;in a really cool way on Instagram;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compiled a &lt;a href=&quot;https://www.theatlantic.com/photo/2017/03/mount-etna-europes-most-active-volcano/519681/&quot;&gt;crazy photo essay on Mount Etna,&lt;/a&gt; Europe’s most active volcano.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But here’s the sad truth: I  only see a tiny percentage of the things my officemates make. I just don’t have enough time in the day to read through every story on &lt;a href=&quot;https://theatlantic.com&quot;&gt;theatlantic.com.&lt;/a&gt; And even if I could, I’d still miss all the things our events staffers are planning, or what the product team is coding, or what the graphic artists are cooking up…&lt;/p&gt;

&lt;p&gt;We all work in the same building, but I know very little about what people outside my own team (politics) do on a daily basis. And although I don’t really &lt;em&gt;need&lt;/em&gt; to, I wondered if there was a way to introduce some serendipity into our working lives.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Why is serendipity even important?&lt;/strong&gt; &lt;br /&gt;
This probably deserves a longer answer, and at some point, I’ll write a standalone post.&lt;/p&gt;
  &lt;p&gt;For now, here’s my best shot: Encouraging serendipity at an organization makes room for happy accidents, where something unexpected results from the collision of two separate things. Some of my favorite projects have come from chance conversations — and they’re usually something neither me nor my conversation partner would have developed alone.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;enter-serendipitybot&quot;&gt;Enter SerendipityBot&lt;/h2&gt;
&lt;p&gt;They say that if &lt;a href=&quot;https://en.wiktionary.org/wiki/if_all_you_have_is_a_hammer,_everything_looks_like_a_nail&quot;&gt;all you have is a hammer, everything looks like a nail.&lt;/a&gt; I’m trying to be more careful about jumping to a technical solution when something might just need a simple conversation — or might not be a problem at all.&lt;/p&gt;

&lt;p&gt;But in this case, I felt pretty confident about my idea: &lt;strong&gt;What if we had a Slack bot that unobtrusively asked random staffers about what’s energizing them this week, and then shared that with the office at large?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here was my idea:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I’d make a Slack #serendipity channel where people who are interested in learning about what their coworkers do — and telling their own stories — could join and engage in conversation;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’d code a Slack bot that would randomly ping people from that channel to share what they’re passionate about at that moment, at an interval of no more than once every two weeks or so.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Every day, the bot would ping coworkers during working hours until it had three responses. And at a set time, it would post all three to the #serendipity channel as a small blog post.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Would anyone even want to participate? I floated a trial balloon:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serendipity-pitch.png&quot; alt=&quot;i’m considering an experiment: i enjoy learning via serendipity what my non-political coworkers are working on and wondered if there was a way to find out more intentionally. i’m rigging up a slackbot that would a) ping random dot-com folks at non-annoying intervals (every few weeks?) to ask what they’re writing/coding/videoing about and b) distill that into a occasional digest on a special slack channel. could be a neat place to get some ideas or offer suggestions. if you’re interested in being a part of the beta, throw me a robot emoji here!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK, so I wasn’t crazy! Those 25 people became my beta testers.&lt;/p&gt;

&lt;p&gt;First job was figuring out what the bot would say to people. I wanted it to be chill and non-threatening, and give people the option of ducking out — but also be fairly direct.&lt;/p&gt;

&lt;p&gt;Here’s what I ended up with:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serendipity-intro.png&quot; alt=&quot;Hi! I'm SerendipityBot, created by @andrewmcgill. I ask random Atlantic people what they're working on this week that excites them, and share a brief digest every day in #serendipity. It's a fun way to get an idea of the cool things your coworkers are doing. Want to partipate? If so, tell me something you're working on this week that you'd like to share, in the form of &amp;quot;I am *building a rocket,*&amp;quot; or &amp;quot;I'm *writing about Capt. Jean-Luc Picard*.&amp;quot; If you don't want me to bug you right now, reply *&amp;quot;snooze.&amp;quot;* If you never want to hear from me again (:sob:), type *&amp;quot;I hate you.&amp;quot;*&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The bot waits a while for an answer. If it doesn’t get one, it nudges politely: “I’ll ask one more time before leaving you alone: Any chance you want to share a cool thing you’re working on this week?”&lt;/p&gt;

&lt;p&gt;It’s key, by the way, to give people a way to let the bot know they don’t really have anything they want to share. Sometimes, you’re just not working on anything exciting at the moment. Or maybe you’re too busy. In that case, the bot happily accepts &lt;code class=&quot;highlighter-rouge&quot;&gt;snooze&lt;/code&gt; and leaves the person alone for two weeks.&lt;/p&gt;

&lt;p&gt;Right now, I have the bot pinging a random employee every 10 minutes, from 11 a.m. to 2 p.m., Monday through Friday. Once it gets three responses, it stops for the day. (Of course, sometimes people respond a few hours late, after the quota has already been filled, so we’ll occasionally have four or even five responses in a single day.)&lt;/p&gt;

&lt;p&gt;At the stroke of 2:30 p.m. — I originally set it for the next morning, but people didn’t like waiting a whole day to see their responses go up — the bot posts in #serendipity.&lt;/p&gt;

&lt;p&gt;Here’s an example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serendipity-example.png&quot; alt=&quot;A slack conversation initated by the bot that culminates in a picture of a panther with a breathing mask.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-has-this-experiment-turned-out&quot;&gt;How has this experiment turned out?&lt;/h2&gt;
&lt;p&gt;Pretty well. More than 70 people have joined the #serendipity channel — somewhere around a quarter of the entire &lt;em&gt;Atlantic&lt;/em&gt; Slack community. SerendipityBot had some hiccups: It spammed a bunch of people on Martin Luther King Jr. Day, which is on a Monday, when the bot thought everyone would be working. But overall, I think it has made each day a teensy bit more delightful.&lt;/p&gt;

&lt;p&gt;What’s the long term impact? I don’t know. So far, I haven’t seen The Next Big Atlantic Idea bubble up from a conversation in #serendipity. But that’s not really the point. Getting to know your coworkers better is a worthy goal on its own — and I think SerendipityBot has helped with that.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’d like to look at the code powering SerendipityBot, &lt;a href=&quot;https://github.com/arm5077/sup-slackbot&quot;&gt;it’s available here.&lt;/a&gt; Tldr: It’s a Node app that lives on Heroku and stores user information in a MongoDB database.&lt;/em&gt;&lt;/p&gt;</content><author><name>andrewmcgill</name></author><summary type="html">At any given moment, people are doing some pretty neat stuff at The Atlantic. Just last week, my coworkers:</summary></entry></feed>
